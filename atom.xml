<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SHuai&#39;s journal</title>
  
  <subtitle>the records of life and work</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tanshuai1001.github.io/"/>
  <updated>2019-01-07T06:12:32.327Z</updated>
  <id>https://tanshuai1001.github.io/</id>
  
  <author>
    <name>Tan Shuai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java web 应用框架</title>
    <link href="https://tanshuai1001.github.io/2019/01/06/java-web-frameworks/"/>
    <id>https://tanshuai1001.github.io/2019/01/06/java-web-frameworks/</id>
    <published>2019-01-06T15:37:11.000Z</published>
    <updated>2019-01-07T06:12:32.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC-vs-Struts2"><a href="#SpringMVC-vs-Struts2" class="headerlink" title="SpringMVC vs. Struts2"></a>SpringMVC vs. Struts2</h1><h2 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a><a href="/2019/01/04/spring-MVC-webflux">SpringMVC</a></h2><h2 id="Struts2"><a href="#Struts2" class="headerlink" title="Struts2"></a>Struts2</h2><p>Apache软件基金会开源项目，基于MVC设计模式的应用程序框架<br>MVC模式：JSP+JavaBean=Model1,JSP+Servlet+JavaBean=Model2(最典型的的MVC)</p><h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h1 id="Hibernate-vs-Mybatis-vs-SpringDataJPA"><a href="#Hibernate-vs-Mybatis-vs-SpringDataJPA" class="headerlink" title="Hibernate vs. Mybatis vs. SpringDataJPA"></a>Hibernate vs. Mybatis vs. SpringDataJPA</h1><p>Java Persistence API (JPA) 是一种规范。Hibernate就是实现了JPA接口的ORM框架。<br>Spirng data jpa是spring提供的一套简化JPA开发的框架，按照约定好的【方法命名规则】写dao层接口，就可以在不写接口实现的情况下，实现对数据库的访问和操作。同时提供了很多除了CRUD之外的功能，如分页、排序、复杂查询等。Spring Data JPA 可以理解为 JPA 规范的再次封装抽象，底层还是使用了 Hibernate 的 JPA 技术实现。</p><h2 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a><a href="http://www.mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="noopener">Mybatis</a></h2><p>支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。</p><h1 id="Springboot"><a href="#Springboot" class="headerlink" title="Springboot"></a>Springboot</h1><h1 id="Shiro-vs-SpringSecurity"><a href="#Shiro-vs-SpringSecurity" class="headerlink" title="Shiro vs. SpringSecurity"></a>Shiro vs. SpringSecurity</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SpringMVC-vs-Struts2&quot;&gt;&lt;a href=&quot;#SpringMVC-vs-Struts2&quot; class=&quot;headerlink&quot; title=&quot;SpringMVC vs. Struts2&quot;&gt;&lt;/a&gt;SpringMVC vs. Struts2&lt;/h1
      
    
    </summary>
    
      <category term="计算机软件" scheme="https://tanshuai1001.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="java" scheme="https://tanshuai1001.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java并发</title>
    <link href="https://tanshuai1001.github.io/2019/01/05/java-concurrent/"/>
    <id>https://tanshuai1001.github.io/2019/01/05/java-concurrent/</id>
    <published>2019-01-05T04:55:07.000Z</published>
    <updated>2019-01-05T09:12:35.618Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Reentrancy-重进入"><a href="#Reentrancy-重进入" class="headerlink" title="Reentrancy(重进入)"></a>Reentrancy(重进入)</h1><p>重进入意味着锁的请求是基于线程(per-thread)而不是调用(invocation)<br>每个锁关联一个请求计数(acquisition count)和一个占有它的线程</p><h1 id="并发容器"><a href="#并发容器" class="headerlink" title="并发容器"></a>并发容器</h1><p>同步容器类包括Vector和Hashtable<br>并发容器改进了同步容器类，提供不会抛出ConcurrentModificationException的迭代器</p><h2 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h2><p>ConcurrentHashMap代替同步的HashMap，是常用的并发容器。<br>原来用公共锁同步每一个方法，并严格限制只有一个线程能同时访问容器。ConcurrentHashMap使用更加细化的<strong>分离锁</strong>机制。</p><ol><li>任意数量读程序可以访问</li><li>读写可以并发访问</li><li>有限的写程序可以并发</li></ol><h2 id="ConcurrentMap"><a href="#ConcurrentMap" class="headerlink" title="ConcurrentMap"></a>ConcurrentMap</h2><p>ConcurrentHashMap不能够在独占访问中被加锁。使用ConcurrentMap接口常见的复合操作：put-if-absent, remove-if-equal, replace-if-equal等都已经实现为原子操作</p><h2 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h2><p>同步List的一个并发替代品（CopyOnWriteArraySet是同步Set的一个并发替代品）<br>访问不需要同步，每次修改都会创建并重新发布一个新的容器拷贝</p><h2 id="BlockingQueue"><a href="#BlockingQueue" class="headerlink" title="BlockingQueue"></a>BlockingQueue</h2><p>提供可阻塞的put和take方法，与可定时的offer和poll等价<br>offer方法如果未执行成功会返回一个失败状态，可以根据状态来制定策略</p><ol><li><p>LinkedBlockingQueue和ArrayBlockingQueue是FIFO队列（与LinkedList和ArrayList相似）</p></li><li><p>PriorityBlockingQueue优先级队列，可以使用Comparable和Comparator处理顺序</p></li><li><p>SynchronousQueue没有存储能力，除非另一个线程已经准备好参与移交工作，否则put和take会一直阻塞</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Reentrancy-重进入&quot;&gt;&lt;a href=&quot;#Reentrancy-重进入&quot; class=&quot;headerlink&quot; title=&quot;Reentrancy(重进入)&quot;&gt;&lt;/a&gt;Reentrancy(重进入)&lt;/h1&gt;&lt;p&gt;重进入意味着锁的请求是基于线程(per-
      
    
    </summary>
    
      <category term="计算机软件" scheme="https://tanshuai1001.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="java" scheme="https://tanshuai1001.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>JVM调优</title>
    <link href="https://tanshuai1001.github.io/2019/01/04/JVM-optimizing/"/>
    <id>https://tanshuai1001.github.io/2019/01/04/JVM-optimizing/</id>
    <published>2019-01-04T10:22:56.000Z</published>
    <updated>2019-01-06T08:04:11.232Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="回收算法"><a href="#回收算法" class="headerlink" title="回收算法"></a>回收算法</h2><p><a href="https://pengjiaheng.iteye.com/blog/520228" target="_blank" rel="noopener">调优总结（三）-基本垃圾回收算法</a></p><ol><li>按照基本回收策略分:引用计数（Reference Counting）、标记-清除（Mark-Sweep）、复制（Copying）、标记-整理（Mark-Compact）</li><li>按分区对待的方式分：增量收集（Incremental Collecting）、分代收集（Generational Collecting）</li><li>按系统线程分：串行收集、并行收集、并发收集</li></ol><h2 id="分代收集（Generational-Collecting）"><a href="#分代收集（Generational-Collecting）" class="headerlink" title="分代收集（Generational Collecting）"></a>分代收集（Generational Collecting）</h2><p>虚拟机中的共划分为三个代：年轻代（Young Generation）、年老点（Old Generation）和持久代（Permanent Generation）。</p><p><a href="https://blog.csdn.net/antony9118/article/details/51425581" target="_blank" rel="noopener">为什么新生代内存需要有两个Survivor区</a><br>Minor GC 年轻代空间清理回收<br>Major GC 年老代空间清理回收（因为Major GC一般伴随着Minor GC，也可以看做触发了Full GC）<br>Full GC 整个堆空间的清理回收<br>刚刚新建的对象在Eden中，经历一次Minor GC，Eden中的存活对象就会被移动到第一块survivor space S0，Eden被清空；等Eden区再满了，就再触发一次Minor GC，Eden和S0中的存活对象又会被复制送入第二块survivor space S1（这个过程非常重要，因为这种复制算法保证了S1中来自S0和Eden两部分的存活对象占用连续的内存空间，避免了碎片化的发生）。S0和Eden被清空，然后下一轮S0与S1交换角色，如此循环往复。<br>整个过程中，永远有一个survivor space是空的。另一个非空的survivor space无碎片。</p><a id="more"></a><h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><p>对象引用类型分为强引用、软引用、弱引用和虚引用。</p><p>强引用:就是我们一般声明对象是时虚拟机生成的引用，强引用环境下，垃圾回收时需要严格判断当前对象是否被强引用，如果被强引用，则不会被垃圾回收</p><p>软引用:软引用一般被做为缓存来使用。与强引用的区别是，软引用在垃圾回收时，虚拟机会根据当前系统的剩余内存来决定是否对软引用进行回收。如果剩余内存比较紧张，则虚拟机会回收软引用所引用的空间；如果剩余内存相对富裕，则不会进行回收。换句话说，虚拟机在发生OutOfMemory时，肯定是没有软引用存在的。</p><p>弱引用:弱引用与软引用类似，都是作为缓存来使用。但与软引用不同，弱引用在进行垃圾回收时，是一定会被回收掉的，因此其生命周期只存在于一个垃圾回收周期内。</p><p>系统一般在使用时都是用的强引用。而“软引用”和“弱引用”比较少见。他们一般被作为缓存使用，而且一般是在内存大小比较受限的情况下做为缓存。因为如果内存足够大的话，可以直接使用强引用作为缓存即可，同时可控性更高。因而，他们常见的是被使用在桌面应用系统的缓存。</p><h2 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h2><p>垃圾收集算法是方法论，垃圾收集器是具体实现。<br>JDK7/8后，HotSpot虚拟机所有收集器及组合<br><img src="/2019/01/04/JVM-optimizing/collector.jpg" alt="收集器组合"></p><ol><li>Serial收集器<br>Serial收集器是最基本、历史最久的收集器，曾是新生代手机的唯一选择。他是单线程的，只会使用一个CPU或一条收集线程去完成垃圾收集工作，并且它在收集的时候，必须暂停其他所有的工作线程，直到它结束，即“Stop the World”。</li><li>ParNew收集器<br>ParNew收集器是Serial收集器的多线程版本</li><li>Parallel Scavenge收集器<br>新生代收集器，并行的多线程收集器。</li><li>Serial Old收集器<br>Serial 收集器的老年代版本，单线程，“标记整理”算法，主要是给Client模式下的虚拟机使用。</li><li><p>Parallel Old收集器</p></li><li><p>CMS(Concurrent Mark Sweep)收集器</p></li><li><p>G1收集器</p></li></ol><h1 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h1><p><a href="https://pengjiaheng.iteye.com/blog/538582" target="_blank" rel="noopener">JVM调优总结（七）-典型配置举例1</a><br><a href="https://pengjiaheng.iteye.com/blog/545015" target="_blank" rel="noopener">M调优总结（八）-典型配置举例2</a></p><h2 id="堆设置"><a href="#堆设置" class="headerlink" title="堆设置"></a>堆设置</h2><p>-Xms:初始堆大小<br>-Xmx:最大堆大小<br>-XX:NewSize=n:设置年轻代大小<br>-XX:NewRatio=n:设置年轻代和年老代的比值。如:为3，表示年轻代与年老代比值为1：3，年轻代占整个年轻代年老代和的1/4<br>-XX:SurvivorRatio=n:年轻代中Eden区与两个Survivor区的比值。注意Survivor区有两个。如：3，表示Eden：Survivor=3：2，一个Survivor区占整个年轻代的1/5<br>-XX:MaxPermSize=n:设置持久代大小</p><h2 id="收集器设置"><a href="#收集器设置" class="headerlink" title="收集器设置"></a>收集器设置</h2><p>-XX:+UseSerialGC:设置串行收集器<br>-XX:+UseParallelGC:设置并行收集器<br>-XX:+UseParalledlOldGC:设置并行年老代收集器<br>-XX:+UseConcMarkSweepGC:设置并发收集器</p><h2 id="垃圾回收统计信息"><a href="#垃圾回收统计信息" class="headerlink" title="垃圾回收统计信息"></a>垃圾回收统计信息</h2><p>-XX:+PrintGC<br>-XX:+PrintGCDetails<br>-XX:+PrintGCTimeStamps<br>-Xloggc:filename</p><h2 id="并行收集器设置"><a href="#并行收集器设置" class="headerlink" title="并行收集器设置"></a>并行收集器设置</h2><p>-XX:ParallelGCThreads=n:设置并行收集器收集时使用的CPU数。并行收集线程数。<br>-XX:MaxGCPauseMillis=n:设置并行收集最大暂停时间<br>-XX:GCTimeRatio=n:设置垃圾回收时间占程序运行时间的百分比。公式为1/(1+n)</p><h2 id="并发收集器设置"><a href="#并发收集器设置" class="headerlink" title="并发收集器设置"></a>并发收集器设置</h2><p>-XX:+CMSIncrementalMode:设置为增量模式。适用于单CPU情况。<br>-XX:ParallelGCThreads=n:设置并发收集器年轻代收集方式为并行收集时，使用的CPU数。并行收集线程数。</p><h1 id="JVM调优工具"><a href="#JVM调优工具" class="headerlink" title="JVM调优工具"></a>JVM调优工具</h1><p>Jconsole，jProfile，VisualVM</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><a href="https://pengjiaheng.iteye.com/blog/548472" target="_blank" rel="noopener">M调优总结（九）-新一代的垃圾回收算法</a></p><p>Garbage Firest（G1）<br><a href="http://www.blogjava.net/BlueDavy/archive/2009/03/11/259230.html" target="_blank" rel="noopener">Garbage First介绍</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;h2 id=&quot;回收算法&quot;&gt;&lt;a href=&quot;#回收算法&quot; class=&quot;headerlink&quot; title=&quot;回收算法&quot;&gt;&lt;/a&gt;回收算法&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://pengjiaheng.iteye.com/blog/520228&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;调优总结（三）-基本垃圾回收算法&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;按照基本回收策略分:引用计数（Reference Counting）、标记-清除（Mark-Sweep）、复制（Copying）、标记-整理（Mark-Compact）&lt;/li&gt;
&lt;li&gt;按分区对待的方式分：增量收集（Incremental Collecting）、分代收集（Generational Collecting）&lt;/li&gt;
&lt;li&gt;按系统线程分：串行收集、并行收集、并发收集&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;分代收集（Generational-Collecting）&quot;&gt;&lt;a href=&quot;#分代收集（Generational-Collecting）&quot; class=&quot;headerlink&quot; title=&quot;分代收集（Generational Collecting）&quot;&gt;&lt;/a&gt;分代收集（Generational Collecting）&lt;/h2&gt;&lt;p&gt;虚拟机中的共划分为三个代：年轻代（Young Generation）、年老点（Old Generation）和持久代（Permanent Generation）。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/antony9118/article/details/51425581&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;为什么新生代内存需要有两个Survivor区&lt;/a&gt;&lt;br&gt;Minor GC 年轻代空间清理回收&lt;br&gt;Major GC 年老代空间清理回收（因为Major GC一般伴随着Minor GC，也可以看做触发了Full GC）&lt;br&gt;Full GC 整个堆空间的清理回收&lt;br&gt;刚刚新建的对象在Eden中，经历一次Minor GC，Eden中的存活对象就会被移动到第一块survivor space S0，Eden被清空；等Eden区再满了，就再触发一次Minor GC，Eden和S0中的存活对象又会被复制送入第二块survivor space S1（这个过程非常重要，因为这种复制算法保证了S1中来自S0和Eden两部分的存活对象占用连续的内存空间，避免了碎片化的发生）。S0和Eden被清空，然后下一轮S0与S1交换角色，如此循环往复。&lt;br&gt;整个过程中，永远有一个survivor space是空的。另一个非空的survivor space无碎片。&lt;/p&gt;
    
    </summary>
    
      <category term="计算机软件" scheme="https://tanshuai1001.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="java" scheme="https://tanshuai1001.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java Message Service</title>
    <link href="https://tanshuai1001.github.io/2019/01/04/Java-Message-Service/"/>
    <id>https://tanshuai1001.github.io/2019/01/04/Java-Message-Service/</id>
    <published>2019-01-04T09:43:40.000Z</published>
    <updated>2019-01-07T11:14:14.069Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JMS-amp-amp-AMQP"><a href="#JMS-amp-amp-AMQP" class="headerlink" title="JMS &amp;&amp; AMQP"></a>JMS &amp;&amp; AMQP</h1><p>JMS 定义了JAVA API层面的标准；在java体系中，多个client均可以通过JMS进行交互，不需要应用修改代码，但是其对跨平台的支持较差；<br>AMQP定义了wire-level层的协议标准；天然具有跨平台、跨语言特性。<br>JMS（Java Message Service）JAVA消息服务： – 基于JVM消息代理的规范。ActiveMQ、HornetMQ是JMS实现<br>AMQP（Advanced Message Queuing Protocol） – 高级消息队列协议，也是一个消息代理的规范，兼容JMS – RabbitMQ是AMQP的实现</p><h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><p>基于Erlang语言实现的，开源，稳定<br>SpringAMQP</p><h1 id="ActiveMQ"><a href="#ActiveMQ" class="headerlink" title="ActiveMQ"></a>ActiveMQ</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JMS-amp-amp-AMQP&quot;&gt;&lt;a href=&quot;#JMS-amp-amp-AMQP&quot; class=&quot;headerlink&quot; title=&quot;JMS &amp;amp;&amp;amp; AMQP&quot;&gt;&lt;/a&gt;JMS &amp;amp;&amp;amp; AMQP&lt;/h1&gt;&lt;p&gt;JMS 定义了J
      
    
    </summary>
    
      <category term="计算机软件" scheme="https://tanshuai1001.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="java" scheme="https://tanshuai1001.github.io/tags/java/"/>
    
      <category term="JMS" scheme="https://tanshuai1001.github.io/tags/JMS/"/>
    
  </entry>
  
  <entry>
    <title>大数据基础</title>
    <link href="https://tanshuai1001.github.io/2019/01/04/big-data-basis/"/>
    <id>https://tanshuai1001.github.io/2019/01/04/big-data-basis/</id>
    <published>2019-01-04T07:09:56.000Z</published>
    <updated>2019-01-07T12:48:12.339Z</updated>
    
    <content type="html"><![CDATA[<p>以hadoop和Spark为代表的平台上进行数据分析技术<br>包括实时数据处理，离线数据处理，数据分析，数据挖掘，机器算法分析预测<br><img src="/2019/01/04/big-data-basis/Hadoop-ecology.png" alt="hadoop生态"></p><p><a href="https://www.oschina.net/p/kafka" target="_blank" rel="noopener">分布式发布订阅消息系统Kafka</a><br><a href="https://baike.baidu.com/item/Kafka/17930165?fr=aladdin" target="_blank" rel="noopener">Kafka</a>是由Apache软件基金会开发的一个开源流处理平台，由Scala和Java编写。Kafka是一种高吞吐量的分布式发布订阅消息系统，它可以处理消费者规模的网站中的所有动作流数据。 这种动作（网页浏览，搜索和其他用户的行动）是在现代网络上的许多社会功能的一个关键因素。 这些数据通常是由于吞吐量的要求而通过处理日志和日志聚合来解决。 对于像Hadoop的一样的日志数据和离线分析系统，但又要求实时处理的限制，这是一个可行的解决方案。Kafka的目的是通过Hadoop的并行加载机制来统一线上和离线的消息处理，也是为了通过集群来提供实时的消息。</p><a id="more"></a><h1 id="HDFS-分布式文件系统"><a href="#HDFS-分布式文件系统" class="headerlink" title="HDFS:分布式文件系统"></a>HDFS:分布式文件系统</h1><p>数据块：默认64M，一般设置128M，备份3份</p><p>NameNode（一个）：管理文件系统的命名空间，存放文件元数据；维护文件系统的所有文件和目录，文件与数据块的映射；记录每个文件中各个块所在的数据节点信息；</p><p>DataNode（多个）：存储并检索数据块；向NameNode更新所存储块的列表；</p><p><img src="/2019/01/04/big-data-basis/HDFS-read.png" alt="HDFS读流程"><br><img src="/2019/01/04/big-data-basis/HDFS-write.png" alt="HDFS写流程"></p><p>常用Shell命令：<br>类Linux系统：<code>ls, cat, mkdir, rm, chmod, chown</code><br>HDFS文件交互：<code>copyFromLocal, copyToLocal, get, put</code><br>python库：hdfs3</p><h1 id="MapReduce-分布式计算"><a href="#MapReduce-分布式计算" class="headerlink" title="MapReduce:分布式计算"></a>MapReduce:分布式计算</h1><p>YARN:<br>ResourceManager分配和调度资源；启动并监控ApplicationManager；监控NodeManager<br>ApplicationMaster为MR(MapReduce)类型的程序申请资源，并分配给内部任务；负责数据切分；监控数据执行和容错<br>NodeManager管理单个节点的资源；处理来自ResourceManager的命令；处理来自ApplicationMaster的命令</p><p>MapReduce编程模型<br>大文件分成多个分片；每个分片由单独的机器去处理，这是Map方法；将各个机器的计算结果进行汇总并得到最终的结果，这就是Reduce方法</p><p>简单示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="string">"a"</span>,<span class="string">"bb"</span>,<span class="string">"ccc"</span>]</span><br><span class="line">l_count = map(len,l) //[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">l_sum = reduce(<span class="keyword">lambda</span> x,y:x+y,l_count) //<span class="number">6</span></span><br></pre></td></tr></table></figure><h1 id="HBase"><a href="#HBase" class="headerlink" title="HBase"></a>HBase</h1><p>高可靠，高性能，面向列，可伸缩，实时读写的分布式数据库<br>利用HDFS(Hadoop Distributed File System)作为文件存储系统</p><h1 id="Spark"><a href="#Spark" class="headerlink" title="Spark"></a>Spark</h1><p>基于内存计算的大数据并行计算框架<br>MapReduce的替代方案，兼容HDFS，HIVE等数据源<br>弹性分布式数据集RDD(Resilient Distributed Datasets)<br>基于事件驱动，通过线程池服用线程提高性能</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以hadoop和Spark为代表的平台上进行数据分析技术&lt;br&gt;包括实时数据处理，离线数据处理，数据分析，数据挖掘，机器算法分析预测&lt;br&gt;&lt;img src=&quot;/2019/01/04/big-data-basis/Hadoop-ecology.png&quot; alt=&quot;hadoop生态&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/p/kafka&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;分布式发布订阅消息系统Kafka&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://baike.baidu.com/item/Kafka/17930165?fr=aladdin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Kafka&lt;/a&gt;是由Apache软件基金会开发的一个开源流处理平台，由Scala和Java编写。Kafka是一种高吞吐量的分布式发布订阅消息系统，它可以处理消费者规模的网站中的所有动作流数据。 这种动作（网页浏览，搜索和其他用户的行动）是在现代网络上的许多社会功能的一个关键因素。 这些数据通常是由于吞吐量的要求而通过处理日志和日志聚合来解决。 对于像Hadoop的一样的日志数据和离线分析系统，但又要求实时处理的限制，这是一个可行的解决方案。Kafka的目的是通过Hadoop的并行加载机制来统一线上和离线的消息处理，也是为了通过集群来提供实时的消息。&lt;/p&gt;
    
    </summary>
    
      <category term="计算机软件" scheme="https://tanshuai1001.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%BD%AF%E4%BB%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>spring MVC webflux</title>
    <link href="https://tanshuai1001.github.io/2019/01/04/spring-MVC-webflux/"/>
    <id>https://tanshuai1001.github.io/2019/01/04/spring-MVC-webflux/</id>
    <published>2019-01-04T03:51:59.000Z</published>
    <updated>2019-01-04T03:59:43.559Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html" target="_blank" rel="noopener">Web on Servlet Stack</a><br><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html" target="_blank" rel="noopener">Web on Reactive Stack</a><br><a href="https://www.cnblogs.com/tengyunhao/p/7518481.html" target="_blank" rel="noopener">[Java] SpringMVC工作原理之一：DispatcherServlet</a><br><a href="https://www.cnblogs.com/tengyunhao/p/7658952.html" target="_blank" rel="noopener">[Java] SpringMVC工作原理之二：HandlerMapping和HandlerAdapter</a><br><a href="https://www.cnblogs.com/tengyunhao/p/7663696.html" target="_blank" rel="noopener">[Java] SpringMVC工作原理之三：ViewResolver</a><br><a href="https://www.cnblogs.com/tengyunhao/p/7670293.html" target="_blank" rel="noopener">[Java] SpringMVC工作原理之四：MultipartResolver</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Web on Servlet St
      
    
    </summary>
    
      <category term="计算机软件" scheme="https://tanshuai1001.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="spring" scheme="https://tanshuai1001.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>uml graphs</title>
    <link href="https://tanshuai1001.github.io/2019/01/01/uml-graphs/"/>
    <id>https://tanshuai1001.github.io/2019/01/01/uml-graphs/</id>
    <published>2019-01-01T15:26:30.000Z</published>
    <updated>2019-01-02T13:59:22.570Z</updated>
    
    <content type="html"><![CDATA[<p>用例图、类图、序列图、状态图、活动图、通信图、构件图、部署图以及复合结构图</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;用例图、类图、序列图、状态图、活动图、通信图、构件图、部署图以及复合结构图&lt;/p&gt;

      
    
    </summary>
    
      <category term="计算机软件" scheme="https://tanshuai1001.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%BD%AF%E4%BB%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>spring aop 概念</title>
    <link href="https://tanshuai1001.github.io/2018/12/29/spring-aop-concept/"/>
    <id>https://tanshuai1001.github.io/2018/12/29/spring-aop-concept/</id>
    <published>2018-12-29T13:57:47.000Z</published>
    <updated>2019-01-05T14:29:55.961Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h1><p>编程范式：面向过程，面向对象，函数式编程，事件驱动编程，面向切面<br>面向切面解决特定问题是面向对象的补充，使非功能性需求与功能性需求分离<br>应用：权限控制，缓存控制，事务控制，审计日志，性能监控，分布式追踪，异常处理</p><blockquote><p><a href="https://mp.weixin.qq.com/s/tAjTkXMbbqWE1XijeVCN7g" target="_blank" rel="noopener">Spring AOP是什么?你都拿它做什么?</a></p></blockquote><a id="more"></a><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="主要注解"><a href="#主要注解" class="headerlink" title="主要注解"></a>主要注解</h2><p>AspectJ注解：@Aspect, @Pointcut, Advice</p><h2 id="切面表达式（Ponitcut-expression）"><a href="#切面表达式（Ponitcut-expression）" class="headerlink" title="切面表达式（Ponitcut expression）"></a>切面表达式（Ponitcut expression）</h2><p>config使用@Aspect, @Component注解</p><ol><li><p>desiganators（指示器）：<br><strong>匹配方法</strong>: execution()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// ? 表示可以省略</span></span><br><span class="line"> execution(</span><br><span class="line">    modifier-pattern? <span class="comment">//修饰符</span></span><br><span class="line">    ret-type-pattern <span class="comment">//返回值</span></span><br><span class="line">    declaring-type-pattern? <span class="comment">//描述包名？</span></span><br><span class="line">    name-pattern(param-pattern) <span class="comment">//方法名，方法参数</span></span><br><span class="line">    <span class="keyword">throws</span>-pattern? <span class="comment">//异常</span></span><br><span class="line"> )</span><br><span class="line"></span><br><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"execution(public * com.example.*Service.*(..) throws java.lang.IllegalAccessException)"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>匹配注解:<br>@target():类注解<br>@args():参数注解<br>@within():类注解<br>@annotation():方法注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//AdminOnly.java</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AdminOnly &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//AspectConfig.java</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AspectConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Pointcut</span>(<span class="string">"@annotation(AdminOnly)"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Before</span>(<span class="string">"method()"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"handle"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>匹配包/类型: within()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//匹配ProductService类里的所有方法</span></span><br><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"within(com.example.service.ProductService)"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">matchType</span><span class="params">()</span></span>&#123; &#125;</span><br><span class="line"><span class="comment">//匹配com.example包及子包下所有的类方法</span></span><br><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"within(com.example..*)"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">matchPackage</span><span class="params">()</span></span>&#123; &#125;</span><br></pre></td></tr></table></figure><p>匹配对象: this(), bean(), target()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoDao</span> <span class="keyword">implements</span> <span class="title">IDao</span></span>&#123; &#125;</span><br><span class="line"><span class="comment">//匹配DemoDao的aop代理对象的方法 ==》 aop代理是指？</span></span><br><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"this(com.example.DemoDao)"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beanDemo</span><span class="params">()</span></span>&#123; &#125;</span><br><span class="line"><span class="comment">//匹配实现IDao接口的目标对象的方法</span></span><br><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"target(com.example.IDao)"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beanDemo</span><span class="params">()</span></span>&#123; &#125;</span><br><span class="line"><span class="comment">//匹配以Service结尾的bean里的方法</span></span><br><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"bean(*Service)"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beanDemo</span><span class="params">()</span></span>&#123; &#125;</span><br></pre></td></tr></table></figure><p>匹配参数: args(), excution()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"execution(**..find*(Long))"</span>) <span class="comment">//只有一个参数</span></span><br><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"execution(**..find*(Long,..))"</span>) <span class="comment">//第一个参数是Long</span></span><br><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"args(Long)"</span>)</span><br><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"args(Long,..)"</span>)</span><br></pre></td></tr></table></figure></li><li><p>wildcards（通配符）：<br><code>*</code>匹配任意数量的字符<br><code>+</code>匹配指定类及其子类<br><code>..</code>匹配任意数的子包或参数</p></li><li><p>operators（运算符）：<br><code>&amp;&amp;</code>与,<code>||</code>或,<code>!</code>非</p></li></ol><h2 id="5种主要的Advice"><a href="#5种主要的Advice" class="headerlink" title="5种主要的Advice"></a>5种主要的Advice</h2><p>@Before 前置通知<br>@After 后置通知，方法执行完之后<br>@AfterReturning 返回通知，成功执行之后，有returning数据<br>@AfterThrowing 异常通知，抛出异常之后<br>@Around 环绕通知<br>上下文：ProceedingJoinPoint</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>设计：代理模式，职责链模式<br>实现：JDK实现，Cglib实现<br>注意事项-AOP不能拦截内部调用</p><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><p>静态代理: 实现同一接口，调用目标对象的方法。<br>动态代理：基于接口代理，基于继承代理<br>InvocationHandler(JDK), MethodInterceptor(<a href="https://baike.baidu.com/item/cglib/9178356?fr=aladdin" target="_blank" rel="noopener">cglib</a>-<a href="https://github.com/cglib/cglib" target="_blank" rel="noopener">github</a>)<br>对比：</p><ol><li>JDK只能针对有接口的类的接口方法进行动态代理</li><li>cglib基于继承，因此无法对static,final方法进行代理</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"subject request"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jdk</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdkProxySubject</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> RealSubject realSubject;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JdkProxySubject</span><span class="params">(RealSubject realSubject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.realSubject = realSubject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"before"</span>);</span><br><span class="line">        Object result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = method.invoke(realSubject,args);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"ex:"</span>+e.getMessage());</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"after"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cglib</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoMethodInterceptor</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"cglib before"</span>);</span><br><span class="line">        Object result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            result = methodProxy.invokeSuper(o,objects);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"cglib ex:"</span>+e.getMessage());</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"cglib after"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// jdk</span></span><br><span class="line">      Subject subject = (Subject) Proxy.newProxyInstance(Client.class.getClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> Class[]&#123;Subject.class&#125;,</span><br><span class="line">                <span class="keyword">new</span> JdkProxySubject(<span class="keyword">new</span> RealSubject()));</span><br><span class="line"></span><br><span class="line">      subject.request();</span><br><span class="line">      subject.hello();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// cglib</span></span><br><span class="line">      Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">      enhancer.setSuperclass(RealSubject.class);</span><br><span class="line">      enhancer.setCallback(<span class="keyword">new</span> DemoMethodInterceptor());</span><br><span class="line">      Subject subject1 = (Subject) enhancer.create();</span><br><span class="line">      subject1.hello();</span><br><span class="line">      subject1.request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="顺带一提IOC与DI"><a href="#顺带一提IOC与DI" class="headerlink" title="顺带一提IOC与DI"></a>顺带一提IOC与DI</h1><p>IoC可以认为是一种全新的设计模式。<br>控制反转（Inversion of Control），是面向对象编程中的一种设计原则，可以用来减低计算机代码之间的耦合度。其中最常见的方式叫做依赖注入（Dependency Injection）。<br>现有的框架实际上使用以下三种基本技术的框架执行服务和部件间的绑定：</p><ol><li>(基于接口): 可服务的对象需要实现一个专门的接口，该接口提供了一个对象，可以重用这个对象查找依赖(其它服务)。早期的容器Excalibur使用这种模式。</li><li>(基于setter): 通过JavaBean的属性(setter方法)为可服务对象指定服务。HiveMind和Spring采用这种方式。</li><li>(基于构造函数): 通过构造函数的参数为可服务对象指定服务。PicoContainer只使用这种方式。HiveMind和Spring也使用这种方式</li></ol><p>简单情况：网络请求直接传对象需要的参数，然后spring直接用类来接收，一个类实体就被实例化了。<br>IOC可以理解为把Spring当做一个容器，用来管理各种service、dao等。不用再去手动new。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概览&quot;&gt;&lt;a href=&quot;#概览&quot; class=&quot;headerlink&quot; title=&quot;概览&quot;&gt;&lt;/a&gt;概览&lt;/h1&gt;&lt;p&gt;编程范式：面向过程，面向对象，函数式编程，事件驱动编程，面向切面&lt;br&gt;面向切面解决特定问题是面向对象的补充，使非功能性需求与功能性需求分离&lt;br&gt;应用：权限控制，缓存控制，事务控制，审计日志，性能监控，分布式追踪，异常处理&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/tAjTkXMbbqWE1XijeVCN7g&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring AOP是什么?你都拿它做什么?&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="计算机软件" scheme="https://tanshuai1001.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="java" scheme="https://tanshuai1001.github.io/tags/java/"/>
    
      <category term="spring" scheme="https://tanshuai1001.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>java的synchronized关键字</title>
    <link href="https://tanshuai1001.github.io/2018/12/29/java-synchronized/"/>
    <id>https://tanshuai1001.github.io/2018/12/29/java-synchronized/</id>
    <published>2018-12-29T04:40:03.000Z</published>
    <updated>2018-12-29T07:32:26.475Z</updated>
    
    <content type="html"><![CDATA[<p>性质：可重入，不可中断<br>两种用法：对象锁（方法锁，同步代码块锁），类锁（静态方法，class对象）<br>多线程访问同步方法的7种情况<br>加解锁原理（计数器加减），可重入原理，可见性原理（写回主内存再通信）<br>书籍：<a href="https://book.douban.com/subject/10484692/" target="_blank" rel="noopener">Java并发编程实战</a></p><a id="more"></a><h1 id="对象锁"><a href="#对象锁" class="headerlink" title="对象锁"></a>对象锁</h1><h2 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a>同步代码块</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;</span><br><span class="line">    n++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Object lock1 = <span class="keyword">new</span> Object();</span><br><span class="line">Object lock2 = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="comment">//两个lock锁定的不同代码块可以并行执行</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">synchronized</span> (lock1)&#123;</span><br><span class="line">    n++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">synchronized</span> (lock1)&#123;</span><br><span class="line">    m++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法锁"><a href="#方法锁" class="headerlink" title="方法锁"></a>方法锁</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">addition</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="类锁"><a href="#类锁" class="headerlink" title="类锁"></a>类锁</h1><h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addition</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="class对象"><a href="#class对象" class="headerlink" title="class对象"></a>class对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (*.class)&#123;</span><br><span class="line">    n++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="7种常见情况"><a href="#7种常见情况" class="headerlink" title="7种常见情况"></a>7种常见情况</h1><ol><li>两个线程同时访问一个对象的同步方法 – 串行</li><li>两个线程访问两个对象的同步方法 – 并行</li><li>两个线程访问synchronized得静态方法 – 串行</li><li>同时访问同步和非同步方法 – （一个线程访问同步方法，一个访问非同步，不影响）并行</li><li>访问同一个对象的不同的普通<em>同步方法</em>（非static方法） – （同一个实例默认使用this）串行</li><li>同时访问静态synchronized和非静态synchronized方法 – 并行</li><li>方法抛异常后会释放锁 – Lock类型的锁不会释放</li></ol><h1 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h1><h2 id="可重入"><a href="#可重入" class="headerlink" title="可重入"></a>可重入</h2><p>同一线程的外层函数获得锁之后，内层函数可直接再次获取该锁（同一把锁）<br><strong>内层函数可以是1.同一个方法2.不同方法3.不同类（子父类）</strong><br>好处：避免死锁，提升封装性<br>粒度：线程而非调用（pthread的粒度是调用）</p><h2 id="不可中断"><a href="#不可中断" class="headerlink" title="不可中断"></a>不可中断</h2><h1 id="Lock接口"><a href="#Lock接口" class="headerlink" title="Lock接口"></a>Lock接口</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">    lock.lock();</span><br><span class="line">    n++;</span><br><span class="line">    lock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javac test.java //编译</span><br><span class="line">javap -verbose test.class //反编译查看字节码,-verbose把信息打印出来</span><br></pre></td></tr></table></figure><h1 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h1><ol><li>效率低：不可中断，不能设置超时，锁释放情况少</li><li>不够灵活：加锁释放时机单一，每个锁仅有单一条件（对比之下，读写锁更加灵活）</li><li>无法知道是否成功获取到锁</li></ol><h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><p>锁对象不能为空<br>作用域不宜过大<br>避免死锁</p><p>Lock与synchronized尽量避免使用，可以使用<code>java.util.concurrent</code>包下的各种工具类<br>synchronized代码更简洁<br>同步访问的各种情况</p><p>锁的优化<br>锁的升级降级，偏斜锁，轻量级锁，重量级锁</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;性质：可重入，不可中断&lt;br&gt;两种用法：对象锁（方法锁，同步代码块锁），类锁（静态方法，class对象）&lt;br&gt;多线程访问同步方法的7种情况&lt;br&gt;加解锁原理（计数器加减），可重入原理，可见性原理（写回主内存再通信）&lt;br&gt;书籍：&lt;a href=&quot;https://book.douban.com/subject/10484692/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Java并发编程实战&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="计算机软件" scheme="https://tanshuai1001.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="java" scheme="https://tanshuai1001.github.io/tags/java/"/>
    
      <category term="concurrent" scheme="https://tanshuai1001.github.io/tags/concurrent/"/>
    
  </entry>
  
  <entry>
    <title>ehcache、memcache、redis比较</title>
    <link href="https://tanshuai1001.github.io/2018/12/28/caches-compare/"/>
    <id>https://tanshuai1001.github.io/2018/12/28/caches-compare/</id>
    <published>2018-12-28T15:11:54.000Z</published>
    <updated>2019-01-01T12:33:42.161Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ehcache"><a href="#Ehcache" class="headerlink" title="Ehcache"></a>Ehcache</h1><p>Java’s Most Widely-Used Cache<br><a href="http://www.ehcache.org/documentation/3.6/getting-started.html" target="_blank" rel="noopener">文档</a>较齐全，但是网络访问有点慢。<br><a href="http://www.cnblogs.com/gamehiboy/p/5053578.html" target="_blank" rel="noopener">SpringMVC+mybatis+maven+Ehcache缓存实现</a></p><h1 id="Memcache"><a href="#Memcache" class="headerlink" title="Memcache"></a>Memcache</h1><p>Memcached works on most Linux and BSD like systems. There is no official support for <strong>windows</strong> builds.<br><a href="https://github.com/memcached/memcached/wiki" target="_blank" rel="noopener">相关百科</a></p><h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><p><a href="https://redis.io/commands" target="_blank" rel="noopener">文档</a></p><h1 id="引用链接"><a href="#引用链接" class="headerlink" title="引用链接"></a>引用链接</h1><p><a href="https://www.cnblogs.com/qlqwjy/p/7788912.html" target="_blank" rel="noopener">ehcache、memcache、redis三大缓存比较</a><br><a href="https://www.cnblogs.com/mxmbk/articles/5162813.html" target="_blank" rel="noopener">Spring+EhCache缓存实例</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Ehcache&quot;&gt;&lt;a href=&quot;#Ehcache&quot; class=&quot;headerlink&quot; title=&quot;Ehcache&quot;&gt;&lt;/a&gt;Ehcache&lt;/h1&gt;&lt;p&gt;Java’s Most Widely-Used Cache&lt;br&gt;&lt;a href=&quot;http://w
      
    
    </summary>
    
      <category term="计算机软件" scheme="https://tanshuai1001.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="java" scheme="https://tanshuai1001.github.io/tags/java/"/>
    
      <category term="cache" scheme="https://tanshuai1001.github.io/tags/cache/"/>
    
  </entry>
  
  <entry>
    <title>PLSQL 基础</title>
    <link href="https://tanshuai1001.github.io/2018/12/28/PLSQL-basis/"/>
    <id>https://tanshuai1001.github.io/2018/12/28/PLSQL-basis/</id>
    <published>2018-12-28T09:13:00.000Z</published>
    <updated>2018-12-29T16:33:56.348Z</updated>
    
    <content type="html"><![CDATA[<h1 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h1><p><a href="https://docs.oracle.com/en/database/oracle/oracle-database/12.2/lnpls/index.html" target="_blank" rel="noopener">Database PL/SQL Language Reference</a><br><a href="https://docs.oracle.com/en/database/oracle/oracle-database/12.2/arpls/index.html" target="_blank" rel="noopener">PL/SQL Packages and Types Reference</a></p><p>所有文档位置<a href="https://docs.oracle.com/en/database/oracle/oracle-database/" target="_blank" rel="noopener">Oracle Database Documentation</a><br>可选择对应版本的数据库并查看对应BookShelf</p><a id="more"></a><h1 id="简介与HelloWorld"><a href="#简介与HelloWorld" class="headerlink" title="简介与HelloWorld"></a>简介与HelloWorld</h1><p>Procedure Language/SQL是Oracle对SQL语言的过程化扩展，是面向过程的语言。<br>不同数据库的SQL扩展：Oracle: PL/SQL;DB2: SQL/PL;SQL Server: Transac-SQL(T-SQL)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> serveroutput <span class="keyword">on</span></span><br><span class="line"><span class="comment">-- 打开输出开关</span></span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">    <span class="comment">--说明部分</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="comment">-- 程序体</span></span><br><span class="line">    <span class="comment">-- put_line里面的连接符是||</span></span><br><span class="line">    dbms_output.put_line(<span class="string">'Hello World !'</span>);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line">/ <span class="comment">-- /只需要在SQL Plus中使用</span></span><br></pre></td></tr></table></figure><p>Oracle默认事务级别是read Only所以需要在更改完成后<code>commit;</code>回滚使用<code>rollback;</code><br>可以在SQL Plus中使用命令<code>desc 程序包名</code>查看各个函数如:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt; desc dbms_output</span><br><span class="line">PROCEDURE DISABLE</span><br><span class="line">PROCEDURE ENABLE</span><br><span class="line">参数名称                       类型                    输入/输出默认值?</span><br><span class="line"><span class="comment">------------------------------ ----------------------- ------ --------</span></span><br><span class="line"> BUFFER_SIZE                    NUMBER(38)              IN     DEFAULT</span><br><span class="line">PROCEDURE GET_LINE</span><br><span class="line">参数名称                       类型                    输入/输出默认值?</span><br><span class="line"><span class="comment">------------------------------ ----------------------- ------ --------</span></span><br><span class="line"> LINE                           VARCHAR2                OUT</span><br><span class="line"> STATUS                         NUMBER(38)              OUT</span><br><span class="line">PROCEDURE GET_LINES</span><br><span class="line">参数名称                       类型                    输入/输出默认值?</span><br><span class="line"><span class="comment">------------------------------ ----------------------- ------ --------</span></span><br><span class="line"> LINES                          TABLE OF VARCHAR2(32767) OUT</span><br><span class="line"> NUMLINES                       NUMBER(38)              IN/OUT</span><br><span class="line">PROCEDURE GET_LINES</span><br><span class="line">参数名称                       类型                    输入/输出默认值?</span><br><span class="line"><span class="comment">------------------------------ ----------------------- ------ --------</span></span><br><span class="line"> LINES                          DBMSOUTPUT_LINESARRAY   OUT</span><br><span class="line"> NUMLINES                       NUMBER(38)              IN/OUT</span><br><span class="line">PROCEDURE NEW_LINE</span><br><span class="line">PROCEDURE PUT</span><br><span class="line">参数名称                       类型                    输入/输出默认值?</span><br><span class="line"><span class="comment">------------------------------ ----------------------- ------ --------</span></span><br><span class="line"> A                              VARCHAR2                IN</span><br><span class="line">PROCEDURE PUT_LINE</span><br><span class="line">参数名称                       类型                    输入/输出默认值?</span><br><span class="line"><span class="comment">------------------------------ ----------------------- ------ --------</span></span><br><span class="line"> A                              VARCHAR2                IN</span><br></pre></td></tr></table></figure><h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><p>PL/SQL的程序结构</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span></span><br><span class="line"><span class="comment">--声明部分（变量，光标，例外）</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="comment">--语句序列（DML语句）</span></span><br><span class="line"><span class="keyword">exception</span></span><br><span class="line"><span class="comment">--例外处理</span></span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>定义基本变量类型：char,varchar2,date,number,boolean,long<br>赋值运算<code>:=</code>和<code>into</code>（查询语句中使用）<br>引用型变量<code>var1 table.column%type</code><br>记录型变量<code>var2 table%rowtype</code>，变量分量的引用<code>var2.column</code></p><h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">IF 条件 THEN 语句;语句; <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"></span><br><span class="line">IF 条件 THEN 语句;语句;</span><br><span class="line">ELSE 语句;语句;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"></span><br><span class="line">IF 条件 THEN 语句;语句;</span><br><span class="line">ELSIF 条件 THEN 语句;</span><br><span class="line">ELSE 语句;语句;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> serveroutput <span class="keyword">on</span></span><br><span class="line"><span class="keyword">accept</span> <span class="keyword">num</span> <span class="keyword">prompt</span><span class="string">'输入数字：'</span></span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">pn <span class="built_in">number</span>(<span class="number">7</span>,<span class="number">1</span>) := &amp;<span class="keyword">num</span>;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span> pn&lt;=<span class="number">0</span> <span class="keyword">then</span> SYS.DBMS_OUTPUT.PUT_LINE(<span class="string">'小于0'</span>);</span><br><span class="line">elsif pn=0 then SYS.DBMS_OUTPUT.PUT_LINE('等于0');</span><br><span class="line">else SYS.DBMS_OUTPUT.PUT_LINE('大于0');</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><p>while循环<code>while 条件 loop 循环体 end loop;</code><br>loop循环<code>loop EXIT when 条件1;[EXIT when 条件2;] 循环体 end loop;</code>（常用，易于控制光标）<br>for循环<code>for I in m..n loop 循环体 end loop;</code>如<code>for p in 1..10 loop dbms_output.put_line(p) end loop;</code></p><h1 id="光标Cursor"><a href="#光标Cursor" class="headerlink" title="光标Cursor"></a>光标Cursor</h1><p>相当于集合，因为Oracle没有数组集合<br>语法<code>CURSOR 光标名 [(参数名 数据类型[,参数名 数据类型]...)] IS SELECT 语句;</code><br>打开光标<code>open 光标名;</code><br>取值<code>fetch 光标名 into 变量名;</code><br>关闭释放<code>close 光标名;</code><br>光标的属性：<code>%found</code>,<code>%notfound</code>,<code>%isopen</code>,<code>%rowcount</code>(影响的行数)<br>光标数限制：默认一个会话300个<br><code>show parameter cursor</code><br>修改光标数<code>alter system set open_cursors=400 scope=both</code>(scope:both,memroy,spfile-数据库需重启)</p><p>带参数的光标：相当于高维数组的一维选择，定义和打开的时候带参数，定义带参数名，打开带具体参数。</p><h1 id="例外Exception"><a href="#例外Exception" class="headerlink" title="例外Exception"></a>例外Exception</h1><p>系统例外：no_data_found, too_many_rows, zero_divide, value_error, timeout_on_resource</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exception</span><br><span class="line"> when no_data_found then 语句;</span><br><span class="line"> when others then 语句;</span><br></pre></td></tr></table></figure><p>自定义例外<br>定义类型是<code>exception</code>的变量然后用<code>raise</code>抛出</p><p>Oracle的一些函数：</p><ol><li><p>NVL(expr1,expr2)<br>如果expr1和expr2的数据类型一致，则：<br>如果expr1为空(null),那么显示expr2，<br>如果expr1的值不为空，则显示expr1。</p></li><li><p>NVL2(expr1,expr2, expr3)<br>如果expr1不为NULL，返回expr2； expr1为NULL，返回expr3。<br>expr2和expr3类型不同的话，expr3会转换为expr2的类型，转换不了，则报错。</p></li><li><p>NULLIF(expr1,expr2)<br>如果expr1和expr2相等则返回空(NULL)，否则返回expr1。</p></li><li><p>coalesce(expr1, expr2, expr3,…,exprn)<br>返回表达式中第一个非空表达式，如果都为空则返回空值。<br>所有表达式必须是相同类型，或者可以隐式转换为相同的类型，否则报错。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;官方文档&quot;&gt;&lt;a href=&quot;#官方文档&quot; class=&quot;headerlink&quot; title=&quot;官方文档&quot;&gt;&lt;/a&gt;官方文档&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/en/database/oracle/oracle-database/12.2/lnpls/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Database PL/SQL Language Reference&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://docs.oracle.com/en/database/oracle/oracle-database/12.2/arpls/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PL/SQL Packages and Types Reference&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;所有文档位置&lt;a href=&quot;https://docs.oracle.com/en/database/oracle/oracle-database/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Oracle Database Documentation&lt;/a&gt;&lt;br&gt;可选择对应版本的数据库并查看对应BookShelf&lt;/p&gt;
    
    </summary>
    
      <category term="计算机软件" scheme="https://tanshuai1001.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="database" scheme="https://tanshuai1001.github.io/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>oracle 基础操作</title>
    <link href="https://tanshuai1001.github.io/2018/12/28/oracle-basis/"/>
    <id>https://tanshuai1001.github.io/2018/12/28/oracle-basis/</id>
    <published>2018-12-28T03:20:51.000Z</published>
    <updated>2018-12-29T16:33:51.307Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用户账号密码"><a href="#用户账号密码" class="headerlink" title="用户账号密码"></a>用户账号密码</h1><p>工具：SQL plus<br>sys,system,sysman:自己设定的密码<br>scott:tiger<br>错误警告密码7天后过期解决办法</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt;SELECT PROFILE FROM DBA_USERS WHERE USERNAME='SYS';</span><br><span class="line"></span><br><span class="line">PROFILE</span><br><span class="line"><span class="comment">------------------------------</span></span><br><span class="line">DEFAULT</span><br><span class="line"></span><br><span class="line">SQL&gt;</span><br><span class="line">SQL&gt;SELECT RESOURCE_NAME,LIMIT FROM DBA_PROFILES WHERE PROFILE ='DEFAULT' AND RESOURCE_NAME='PASSWORD_LIFE_TIME';</span><br><span class="line"></span><br><span class="line">RESOURCE_NAME                  LIMIT</span><br><span class="line"><span class="comment">------------------------------ ------------------------------</span></span><br><span class="line">PASSWORD_LIFE_TIME             180</span><br><span class="line"></span><br><span class="line">SQL&gt;alter profile &lt;profile_name&gt; limit password_life_time UNLIMITED; -- profile_name: DEFAULT</span><br><span class="line"></span><br><span class="line">SQL&gt;alter user `c##scott` identified by 123456; -- 如仍有警告则修改</span><br></pre></td></tr></table></figure><p>用户登录：<code>[username/password] [@server] [as sysdba|sysoper]</code><br>如：<code>system/root @orcl as sysdba</code><br>登录之后切换换用户：<code>[conn | connect] sys/root as sysdba</code><br>查看当前用户：<code>show user</code>(非SQL语句可以不用分号结尾)<br>用户信息可以使用sysdba身份查看dba_users字典<br>启动和锁定用户账户:<code>alter user username account lock/unlock;</code></p><a id="more"></a><h1 id="表空间"><a href="#表空间" class="headerlink" title="表空间"></a>表空间</h1><p>分类：永久表空间（存储表、视图等），临时表空间（数据库执行过程的临时空间），UNDO表空间（保存事务执行前的状态，可以进行回滚）<br><code>dba_tablespaces</code>,<code>user_tablespaces</code>数据字典</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt;select tablespace_name from dba_tablespaces/user_tablespaces;</span><br><span class="line">SYSTEM  <span class="comment">-- 系统表空间</span></span><br><span class="line">SYSAUX <span class="comment">--Example辅助表空间</span></span><br><span class="line">UNDOTBS1 <span class="comment">-- UNDO表空间</span></span><br><span class="line">TEMP  <span class="comment">--临时表空间</span></span><br><span class="line">USERS <span class="comment">--用户表空间</span></span><br></pre></td></tr></table></figure><p><code>dba_users</code>,<code>user_users</code>数据字典<br>oracle字符串使用<strong>单引号</strong><br>设置默认/临时表空间<code>ALTER USER username DEFAULT|TEMPORARY TABLESPACE tablespace_name;</code><br>创建表空间：<code>CREATE [TEMPORARY] TABLESPACE tablespace_name TEMPFILE|DATAFILE &#39;test.dbf&#39; size 10m;</code>其中test为文件名，10m为文件大小。文件名中可以设置文件路径否则在默认路径。<br>查看数据文件位置：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt;select file_name from dba_data_files/dab_temp_files;</span><br><span class="line"></span><br><span class="line">FILE_NAME</span><br><span class="line"><span class="comment">--------------------------------------------------------------------------------</span></span><br><span class="line">D:\APP\12148\VIRTUAL\ORADATA\ORCL\SYSTEM01.DBF</span><br><span class="line">D:\APP\12148\VIRTUAL\ORADATA\ORCL\SYSAUX01.DBF</span><br><span class="line">D:\APP\12148\VIRTUAL\ORADATA\ORCL\UNDOTBS01.DBF</span><br><span class="line">D:\APP\12148\VIRTUAL\ORADATA\ORCL\USERS01.DBF</span><br><span class="line">D:\APP\12148\VIRTUAL\ORADATA\ORCL\TEMP01.DBF</span><br></pre></td></tr></table></figure><p>修改表空间状态<code>ALTER TABLESPACE tablespace_name ONLINE|OFFLINE;</code><br>查看状态<code>select status from dba_tablespaces;</code><br>表空间读写状态<code>ALTER TABLESPACE tablespace_name READ ONLY | READ WRITE;</code>（只读||可读写，都需要ONLINE状态下，ONLINE状态默认是READ WRITE，status的三种取值：OFFLINE、READ ONLY、ONLINE）<br>增加数据文件<code>ALTER TABLESPACE tablespace_name ADD DATAFILE &#39;xx.dbf&#39; SIZE xx;</code><br>删除数据文件<code>ALTER TABLESPACE tablespace_name DROP DATAFILE &#39;xx.dbf&#39;;</code>（不能删除创建表空间时第一个数据文件）<br>删除表空间<code>DROP TABLESPACE tablespace_name [INCLUDING CONTENTS];</code>（INCLUDING CONTENTS表示连同文件内容一起删除）</p><h1 id="数据表"><a href="#数据表" class="headerlink" title="数据表"></a>数据表</h1><p>数据类型：字符型，数值型，日期型，其他类型</p><ol><li>字符型<br>CHAR(n),NCHAR(n):NCHAR按照Unicode存储，汉字常使用此类型，charMaxn=2000,ncharMaxn=1000<br>VARCHAR2(n),NVARCHAR2(n):不补充空格，不浪费空间，varcharMaxn=4000,nvarcharMaxn=2000</li><li>数值型<br>NUMBER(p,s):p有效数字，s小数点后位数<br>FLOAT(n):二进制</li><li>日期型<br>DATE：范围-公元前4712年1月1日到公元9999年12月31日，精确到秒<br>TIMESTAMP：精确到小数秒</li><li>其他类型(大对象)<br>BLOB: 4GB,二进制<br>CLOB: 4GB,字符串</li></ol><p>创建表<code>CREATE TABLE table_name(colum_name datatype,...);</code><br>修改表：<br>    添加字段<code>ALTER TABLE table_name ADD column_name datatype;</code><br>    修改字段数据类型<code>ALTER TABLE table_name MODIFY column_name datatype;</code><br>    删除字段<code>ALTER TABLE table_name DROP COLUMN column_name;</code><br>    修改字段名<code>ALTER TABLE table_name RENAME COLUMN column_name TO new_name;</code><br>    修改表名<code>RENAME table_name TO new_name;</code><br>截断表（清空数据）<code>TRUNCATE TABLE table_name;</code><br>删除表<code>DROP TABLE table_name;</code><br>添加数据<code>INSERT INTO table_name(column1,column2,...) VALUES (value1,value2,...);</code></p><p>建表时复制<code>CREATE TABLE table_new AS SELECT * FROM table_old;</code><br>添加时复制<code>INSERT INTO ... SELECT ... ;</code><br>修改数据<code>UPDATE table_name SET column1=&#39;...&#39;,column2=&#39;...&#39; [where conditions];</code><br>删除数据<code>DELETE FROM table_name [where conditions];</code>(TRUNCATE速度更快)</p><h1 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h1><p>查看约束信息<code>user_constraints</code>数据字典</p><ol><li>非空约束<code>NOT NULL</code>非空约束没有名字使用MODIFY<code>ALTER TABLE table_name MODIFY column datatype NOT NULL;</code></li><li>主键约束<code>PRIMARY KEY</code>,表级约束<code>CONSTRAINT constaint_name PRIMARY KEY(column_name1,...);</code><br>修改表添加主键<code>ALTER TABLE table_name ADD CONSTRAINT constaint_name PRIMARY KEY(column_name1,...);</code><br>更改约束名称<code>ALTER TABLE table_name CONSTRAINT old_name TO new_name;</code><br>禁用/启用约束<code>ALTER TABLE table_name DISABLE|ENABLE CONSTRAINT constaint_name;</code><br>删除约束<code>ALTER TABLE table_name DROP CONSTRAINT constaint_name;</code>删除主键<code>DROP PRIMARY KEY [CASCADE];</code></li><li>外键约束<code>FOREIGN KEY</code><br>创建表时设置<code>CREATE TABLE table1(column_name datatype REFERENCE table2(column_name),...);</code>table2主表<br>表级约束<code>CONSTRAINT constaint_name FOREIGN KEY(column_name) REFERENCES table2(column_name) [ON DELETE CASCADE];</code>主表删除，对应记录也被删除<br>修改表时修改外键约束<code>ALTER TABLE table_name ADD CONSTRAINT constaint_name FOREIGN KEY(column_name) REFERENCES table2(column_name) [ON DELETE CASCADE];</code><br>禁用/启用约束，删除约束</li><li>唯一约束<code>UNIQUE</code></li><li>检查约束<code>CHECK</code><br><code>CHECK(expressions)</code>如<code>salary number(10,0) check(salary &gt; 0)</code></li></ol><h1 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h1><p>语句<code>SELECT [DISTINGCT] column_name,...|* FROM table_name [where conditions];</code><br>SQL PLUS设置格式<br> 别名<code>COLUMN(COL) column_name HEADING new_name;</code><br> a开头后面指定长度<code>COL column_name FORMAT a10;</code><br> 显示位数<code>COL column_name FORMAT 999.9;</code><br> 数字前面多个$符号<code>COL column_name FORMAT $999.9;</code><br> 清除格式<code>COL column_name CLEAR;</code><br>字段设置别名<code>column_name [as] name;</code></p><p>逻辑运算符顺序 not &gt; and &gt; or<br>比较运算符 &gt; 逻辑运算符<br>模糊查询<code>_%</code>下划线代表任一字符，%代表任意多字符<br>范围查询<code>between ... and</code>,<code>in(...)</code>,<code>not in()</code><br>条件跳转<code>case ... when ... then ... [else ...] end</code>,<code>case when ... then ... [else ...] end</code><br>decode函数<code>decode(column_name,value1,result1,value2,result2,...,defaultValue)</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;用户账号密码&quot;&gt;&lt;a href=&quot;#用户账号密码&quot; class=&quot;headerlink&quot; title=&quot;用户账号密码&quot;&gt;&lt;/a&gt;用户账号密码&lt;/h1&gt;&lt;p&gt;工具：SQL plus&lt;br&gt;sys,system,sysman:自己设定的密码&lt;br&gt;scott:tiger&lt;br&gt;错误警告密码7天后过期解决办法&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;SQL&amp;gt;SELECT PROFILE FROM DBA_USERS WHERE USERNAME=&#39;SYS&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PROFILE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;------------------------------&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DEFAULT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SQL&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SQL&amp;gt;SELECT RESOURCE_NAME,LIMIT FROM DBA_PROFILES WHERE PROFILE =&#39;DEFAULT&#39; AND RESOURCE_NAME=&#39;PASSWORD_LIFE_TIME&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RESOURCE_NAME                  LIMIT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;------------------------------ ------------------------------&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PASSWORD_LIFE_TIME             180&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SQL&amp;gt;alter profile &amp;lt;profile_name&amp;gt; limit password_life_time UNLIMITED; -- profile_name: DEFAULT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SQL&amp;gt;alter user `c##scott` identified by 123456; -- 如仍有警告则修改&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;用户登录：&lt;code&gt;[username/password] [@server] [as sysdba|sysoper]&lt;/code&gt;&lt;br&gt;如：&lt;code&gt;system/root @orcl as sysdba&lt;/code&gt;&lt;br&gt;登录之后切换换用户：&lt;code&gt;[conn | connect] sys/root as sysdba&lt;/code&gt;&lt;br&gt;查看当前用户：&lt;code&gt;show user&lt;/code&gt;(非SQL语句可以不用分号结尾)&lt;br&gt;用户信息可以使用sysdba身份查看dba_users字典&lt;br&gt;启动和锁定用户账户:&lt;code&gt;alter user username account lock/unlock;&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="计算机软件" scheme="https://tanshuai1001.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="database" scheme="https://tanshuai1001.github.io/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>tushare数据平台</title>
    <link href="https://tanshuai1001.github.io/2018/12/27/tushare-data/"/>
    <id>https://tanshuai1001.github.io/2018/12/27/tushare-data/</id>
    <published>2018-12-27T02:41:39.000Z</published>
    <updated>2018-12-29T16:34:43.098Z</updated>
    
    <content type="html"><![CDATA[<p>tushare PRO版本<a href="https://tushare.pro/register?reg=225995" target="_blank" rel="noopener">https://tushare.pro/register?reg=225995</a><br>顺记一下比较好用的<a href="http://scrapy-chs.readthedocs.io/zh_CN/1.0/" target="_blank" rel="noopener">爬虫框架</a></p><p>tushare有专门的python库，最近的pro版新增了http接口。<br>参数使用json模式(POSTMAN则选择BODY-raw-JSON)<br><code>POST https://api.tushare.pro</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"api_name"</span>:<span class="string">"stock_basic"</span>,</span><br><span class="line">    <span class="attr">"token"</span>:<span class="string">"you token"</span>,</span><br><span class="line">    <span class="attr">"params"</span>:&#123;<span class="attr">"liststatus"</span>:<span class="string">"L"</span>&#125;,</span><br><span class="line">    <span class="attr">"fields"</span>:<span class="string">""</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;tushare PRO版本&lt;a href=&quot;https://tushare.pro/register?reg=225995&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://tushare.pro/register?reg=225995&lt;/a&gt;
      
    
    </summary>
    
      <category term="数据平台" scheme="https://tanshuai1001.github.io/categories/%E6%95%B0%E6%8D%AE%E5%B9%B3%E5%8F%B0/"/>
    
    
      <category term="finance" scheme="https://tanshuai1001.github.io/tags/finance/"/>
    
  </entry>
  
  <entry>
    <title>有用的资源网站</title>
    <link href="https://tanshuai1001.github.io/2018/12/25/useful-sources/"/>
    <id>https://tanshuai1001.github.io/2018/12/25/useful-sources/</id>
    <published>2018-12-25T05:52:07.000Z</published>
    <updated>2018-12-29T04:57:16.392Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://alpha.wallhaven.cc/" target="_blank" rel="noopener">Wallhaved壁纸网站</a><br><a href="https://pixabay.com/" target="_blank" rel="noopener">Plxabay 免费的高清图片</a><br><a href="https://www.gratisography.com/" target="_blank" rel="noopener">Gratisography免费高分辨率图片</a><br><a href="https://www.splitshire.com/" target="_blank" rel="noopener">Splitshire 免费高清风景大图</a><br><a href="https://unsplash.com/" target="_blank" rel="noopener">Unsplash 摄影师社区</a><br><a href="https://500px.com/" target="_blank" rel="noopener">500px</a></p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://alpha.wallhaven.cc/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Wallhaved壁纸网站&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://pixabay.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Plxabay 免费的高清图片&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.gratisography.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Gratisography免费高分辨率图片&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.splitshire.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Splitshire 免费高清风景大图&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://unsplash.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Unsplash 摄影师社区&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://500px.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;500px&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="摄影图片" scheme="https://tanshuai1001.github.io/categories/%E6%91%84%E5%BD%B1%E5%9B%BE%E7%89%87/"/>
    
    
      <category term="sourcesIndex" scheme="https://tanshuai1001.github.io/tags/sourcesIndex/"/>
    
  </entry>
  
  <entry>
    <title>flutter入门</title>
    <link href="https://tanshuai1001.github.io/2018/12/25/flutter-start/"/>
    <id>https://tanshuai1001.github.io/2018/12/25/flutter-start/</id>
    <published>2018-12-25T00:30:44.000Z</published>
    <updated>2018-12-29T04:56:33.542Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://book.flutterchina.club/" target="_blank" rel="noopener">flutter中文网</a><br><a href="https://flutter.io/docs" target="_blank" rel="noopener">flutter官方网站</a><br><a href="https://github.com/flutter/samples.git" target="_blank" rel="noopener">github样例代码</a></p><a id="more"></a><h1 id="Dart基础"><a href="#Dart基础" class="headerlink" title="Dart基础"></a>Dart基础</h1><h2 id="内置类型"><a href="#内置类型" class="headerlink" title="内置类型"></a>内置类型</h2><p>Number(num,int double),String,Boolean,Map,List<br>Runes, Symbols</p><p>var, dynamic</p><h2 id="数值操作"><a href="#数值操作" class="headerlink" title="数值操作"></a>数值操作</h2><p>~/ 取整除法<br>字符串 * n: 复制n次<br>插值表达式${expression}<br>List的创建：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> list = <span class="keyword">const</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]; <span class="comment">// 常量Map类似</span></span><br><span class="line"><span class="keyword">var</span> list = <span class="keyword">new</span> <span class="built_in">List</span>();</span><br></pre></td></tr></table></figure><p>复制运算符: ??= 如果变量为空则赋值</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line">a ??= <span class="number">5</span>;</span><br><span class="line"><span class="built_in">String</span> b = <span class="string">"1"</span>;</span><br><span class="line"><span class="built_in">String</span> c = a ?? b;</span><br></pre></td></tr></table></figure><h2 id="函数方法"><a href="#函数方法" class="headerlink" title="函数方法"></a>函数方法</h2><ol><li>构造函数继承类似C++冒号继承语法,key值是唯一确定元素。</li><li>switch里面的continue跳转到标签，类似goto</li><li><p>函数可选参数：</p> <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可选命名参数</span></span><br><span class="line">func(<span class="built_in">String</span> name,&#123;<span class="built_in">int</span> age, <span class="built_in">int</span> gender&#125;)&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"name=$name,age=$age,gender=$gender"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方括号调用的时候没有参数名称</span></span><br><span class="line"><span class="comment">//可选位置参数</span></span><br><span class="line">func(<span class="built_in">String</span> name,[<span class="built_in">int</span> age, <span class="built_in">int</span> gender])&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"name=$name,age=$age,gender=$gender"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>其他</p> <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">list.forEach(<span class="built_in">print</span>) <span class="comment">//方法对象</span></span><br><span class="line">()&#123; &#125; <span class="comment">// 匿名方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 闭包</span></span><br><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line"><span class="keyword">var</span> a = func();</span><br><span class="line">a(); <span class="comment">//1</span></span><br><span class="line">a(); <span class="comment">//2</span></span><br><span class="line"></span><br><span class="line">func()(); <span class="comment">//1</span></span><br><span class="line">func()(); <span class="comment">//1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func()&#123;</span><br><span class="line"><span class="built_in">int</span> _count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ()&#123;</span><br><span class="line">    _count++;</span><br><span class="line">    <span class="built_in">print</span>(_count);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="异步支持"><a href="#异步支持" class="headerlink" title="异步支持"></a>异步支持</h2><p>Dart类库有非常多的返回Future或者Stream对象的函数。 这些函数被称为异步函数：它们只会在设置好一些耗时操作之后返回，比如像 IO操作。而不是等到这个操作完成。</p><p>async和await关键词支持了异步编程</p><p>Future.then<br>Future.catchError<br>Future.delayed<br>Future.whenComplete<br>Future.wait等待多个异步任务都执行结束后才进行下一步操作<br>Async/await<br>使用async/await消除callback hell<br>async用来表示函数是异步的，定义的函数会返回一个Future对象，可以使用then方法添加回调函数。<br>await 后面是一个Future，表示等待该异步任务完成，异步完成后才会往下走；await必须出现在 async 函数内部。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">task() <span class="keyword">async</span> &#123;</span><br><span class="line">   <span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="built_in">String</span> id = <span class="keyword">await</span> login(<span class="string">"alice"</span>,<span class="string">"******"</span>);</span><br><span class="line">    <span class="built_in">String</span> userInfo = <span class="keyword">await</span> getUserInfo(id);</span><br><span class="line">    <span class="keyword">await</span> saveUserInfo(userInfo);</span><br><span class="line">    <span class="comment">//执行接下来的操作  </span></span><br><span class="line">   &#125; <span class="keyword">catch</span>(e)&#123;</span><br><span class="line">    <span class="comment">//错误处理  </span></span><br><span class="line">    <span class="built_in">print</span>(e);</span><br><span class="line">   &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="运行命令"><a href="#运行命令" class="headerlink" title="运行命令"></a>运行命令</h1><p>单个dart文件控制台输出<code>dart lib/filename.dart</code>（需配置dart环境变量使dart命令可以使用）<br>flutter项目<code>flutter run</code><br>要关闭调试模式并使用发布模式，请使用<code>flutter run --release</code>运行您的应用程序。 这也关闭了Observatory调试器。<br>一个中间模式可以关闭除Observatory之外所有调试辅助工具的，称为“profile mode”，用–profile替代–release即可。</p><h2 id="国内镜像"><a href="#国内镜像" class="headerlink" title="国内镜像"></a>国内镜像</h2><p>新增两个环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PUB_HOSTED_URL</span><br><span class="line">https://pub.flutter-io.cn</span><br><span class="line"></span><br><span class="line">FLUTTER_STORAGE_BASE_URL</span><br><span class="line">https://storage.flutter-io.cn</span><br></pre></td></tr></table></figure><p>执行一下 flutter doctor命令<br>下载在 package get 应该就没有问题了。</p><h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><p>有状态组件StatelessWidget、无状态组件StatefulWidget</p><h2 id="TextWidget"><a href="#TextWidget" class="headerlink" title="TextWidget"></a>TextWidget</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">textAlign:TextAlign.center,</span><br><span class="line">maxLines:<span class="number">1</span>,</span><br><span class="line">overflow:TextOverflow.ellipsis,</span><br><span class="line">style:TextStyle(</span><br><span class="line">    frontSize: <span class="number">25.0</span>, <span class="comment">//浮点数</span></span><br><span class="line">    color: Color.fromARGB(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>), <span class="comment">//A:透明度</span></span><br><span class="line">    decoration: TextDecoration.underline,</span><br><span class="line">    decorationStyle: TextDecorationStyle.solid</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="ContainerWidget"><a href="#ContainerWidget" class="headerlink" title="ContainerWidget"></a>ContainerWidget</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">alignment:Alignment.topLeft,</span><br><span class="line">padding:<span class="keyword">const</span> EdgeInsets.fromLTRB(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>), <span class="comment">//设置左上右下四个方向的值</span></span><br><span class="line"><span class="comment">//LinearGradient设置背景颜色渐变</span></span><br><span class="line"><span class="comment">//BoxDecoration Widget</span></span><br><span class="line">decoration: <span class="keyword">new</span> BoxDecoration(</span><br><span class="line">    gradient: <span class="keyword">const</span> LinearGradient(</span><br><span class="line">        colors:[</span><br><span class="line">            Colors.lightBlue,</span><br><span class="line">            Colors.greenAccent,</span><br><span class="line">            Colors.purple</span><br><span class="line">        ]</span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="ImageWidget"><a href="#ImageWidget" class="headerlink" title="ImageWidget"></a>ImageWidget</h2><p>fit属性<br>图片的混合模式<br>repeat属性<br>Image.asset: 加载资源图片，会被打包<br>Image.network: 网络资源图片<br>Image.file: 本地图片<br>Image.memory: 加载到内存的图片</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Inmage.network(</span><br><span class="line">    <span class="string">"url"</span>,</span><br><span class="line">    scale:<span class="number">2.0</span>,<span class="comment">//图片缩放，值越大，图片越小</span></span><br><span class="line">    fit:BoxFit.fill, </span><br><span class="line">    <span class="comment">// fill拉伸图片布满容器, contain适应图片, cover布满容器自动裁剪</span></span><br><span class="line">    <span class="comment">// fitWidth, fitHeight, scaleDown</span></span><br><span class="line">    color:Colors.greenAccent,</span><br><span class="line">    colorBlendMode: Blenmode.modulate,</span><br><span class="line">    repeat:ImageRepeat.repeat</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="ListViewWidget"><a href="#ListViewWidget" class="headerlink" title="ListViewWidget"></a>ListViewWidget</h2><p>ListTile</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> ListView(</span><br><span class="line">    children: &lt;Widget&gt;[</span><br><span class="line">        <span class="keyword">new</span> ListTile(</span><br><span class="line"></span><br><span class="line">        ),</span><br><span class="line">        <span class="keyword">new</span> ListTile(</span><br><span class="line"></span><br><span class="line">        ),</span><br><span class="line">    ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="动态列表"><a href="#动态列表" class="headerlink" title="动态列表"></a>动态列表</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> ListView.builder(</span><br><span class="line">    itemCount: items.length,</span><br><span class="line">    itemBuilder:(context,index)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ListTile(</span><br><span class="line">            title: <span class="keyword">new</span> Text(<span class="string">"<span class="subst">$&#123;items[index]&#125;</span>"</span>)</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="横向列表"><a href="#横向列表" class="headerlink" title="横向列表"></a>横向列表</h3><p>Axis.horizontal/vertical</p><h2 id="GridView-Widget"><a href="#GridView-Widget" class="headerlink" title="GridView Widget"></a>GridView Widget</h2><p>gridDelegate</p><p>mainAxisSpacing<br>crossAxisSpacing<br>crossAxisCount<br>childAspectRatio: 0.8, 指的是width/height</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://book.flutterchina.club/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;flutter中文网&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://flutter.io/docs&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;flutter官方网站&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/flutter/samples.git&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;github样例代码&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="计算机软件" scheme="https://tanshuai1001.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="flutter" scheme="https://tanshuai1001.github.io/tags/flutter/"/>
    
      <category term="android" scheme="https://tanshuai1001.github.io/tags/android/"/>
    
      <category term="dart" scheme="https://tanshuai1001.github.io/tags/dart/"/>
    
      <category term="frontEnd" scheme="https://tanshuai1001.github.io/tags/frontEnd/"/>
    
  </entry>
  
  <entry>
    <title>effective java</title>
    <link href="https://tanshuai1001.github.io/2018/12/24/effective-java/"/>
    <id>https://tanshuai1001.github.io/2018/12/24/effective-java/</id>
    <published>2018-12-24T06:30:01.000Z</published>
    <updated>2018-12-25T10:03:42.656Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-开始"><a href="#第一章-开始" class="headerlink" title="第一章 开始"></a>第一章 开始</h1><p>effective java 主要涉及java.lang、java.util基本类库，某种程度上涉及java.util.concurrent和java.io共78条建议。</p><a id="more"></a><h1 id="第二章-创建和销毁对象"><a href="#第二章-创建和销毁对象" class="headerlink" title="第二章 创建和销毁对象"></a>第二章 创建和销毁对象</h1><p>===========================</p><h2 id="1-考虑使用静态方法工厂代替构造器"><a href="#1-考虑使用静态方法工厂代替构造器" class="headerlink" title="1. 考虑使用静态方法工厂代替构造器"></a>1. 考虑使用静态方法工厂代替构造器</h2><h2 id="2-遇到多个构造器参数时考虑用构建器"><a href="#2-遇到多个构造器参数时考虑用构建器" class="headerlink" title="2. 遇到多个构造器参数时考虑用构建器"></a>2. 遇到多个构造器参数时考虑用构建器</h2><h2 id="3-用私有构造器或者枚举类型强化Singleton属性"><a href="#3-用私有构造器或者枚举类型强化Singleton属性" class="headerlink" title="3. 用私有构造器或者枚举类型强化Singleton属性"></a>3. 用私有构造器或者枚举类型强化Singleton属性</h2><h2 id="4-通过私有构造器强化不可实例化的能力"><a href="#4-通过私有构造器强化不可实例化的能力" class="headerlink" title="4. 通过私有构造器强化不可实例化的能力"></a>4. 通过私有构造器强化不可实例化的能力</h2><h2 id="5-避免创建不必要的对象"><a href="#5-避免创建不必要的对象" class="headerlink" title="5. 避免创建不必要的对象"></a>5. 避免创建不必要的对象</h2><h2 id="6-消除过期的对象引用"><a href="#6-消除过期的对象引用" class="headerlink" title="6. 消除过期的对象引用"></a>6. 消除过期的对象引用</h2><h2 id="7-避免使用终结方法-finalizer"><a href="#7-避免使用终结方法-finalizer" class="headerlink" title="7. 避免使用终结方法(finalizer)"></a>7. 避免使用终结方法(finalizer)</h2><p>===========================</p><h1 id="第三章-所有对象通用方法"><a href="#第三章-所有对象通用方法" class="headerlink" title="第三章 所有对象通用方法"></a>第三章 所有对象通用方法</h1><p>===========================</p><h2 id="8-覆盖equals时遵守通用约定"><a href="#8-覆盖equals时遵守通用约定" class="headerlink" title="8. 覆盖equals时遵守通用约定"></a>8. 覆盖equals时遵守通用约定</h2><h2 id="9-覆盖equals总是要覆盖hashCode"><a href="#9-覆盖equals总是要覆盖hashCode" class="headerlink" title="9. 覆盖equals总是要覆盖hashCode"></a>9. 覆盖equals总是要覆盖hashCode</h2><h2 id="10-始终要覆盖toString"><a href="#10-始终要覆盖toString" class="headerlink" title="10. 始终要覆盖toString"></a>10. 始终要覆盖toString</h2><h2 id="11-谨慎覆盖clone"><a href="#11-谨慎覆盖clone" class="headerlink" title="11. 谨慎覆盖clone"></a>11. 谨慎覆盖clone</h2><h2 id="12-考虑实现Comparable接口"><a href="#12-考虑实现Comparable接口" class="headerlink" title="12. 考虑实现Comparable接口"></a>12. 考虑实现Comparable接口</h2><p>===========================</p><h1 id="第四章-类和接口"><a href="#第四章-类和接口" class="headerlink" title="第四章 类和接口"></a>第四章 类和接口</h1><p>===========================</p><h2 id="13-使类和成员的可访问性最小化"><a href="#13-使类和成员的可访问性最小化" class="headerlink" title="13. 使类和成员的可访问性最小化"></a>13. 使类和成员的可访问性最小化</h2><h2 id="14-在公有类中使用访问方法而不是公有域"><a href="#14-在公有类中使用访问方法而不是公有域" class="headerlink" title="14. 在公有类中使用访问方法而不是公有域"></a>14. 在公有类中使用访问方法而不是公有域</h2><h2 id="15-使可变性最小化"><a href="#15-使可变性最小化" class="headerlink" title="15. 使可变性最小化"></a>15. 使可变性最小化</h2><h2 id="16-复合优先于继承"><a href="#16-复合优先于继承" class="headerlink" title="16. 复合优先于继承"></a>16. 复合优先于继承</h2><p>复合</p><h2 id="17-要么为继承而设计并提供文档说明，要么就禁止继承"><a href="#17-要么为继承而设计并提供文档说明，要么就禁止继承" class="headerlink" title="17. 要么为继承而设计并提供文档说明，要么就禁止继承"></a>17. 要么为继承而设计并提供文档说明，要么就禁止继承</h2><h2 id="18-接口优于抽象类"><a href="#18-接口优于抽象类" class="headerlink" title="18. 接口优于抽象类"></a>18. 接口优于抽象类</h2><p>接口</p><h2 id="19-接口只用于定义类型"><a href="#19-接口只用于定义类型" class="headerlink" title="19. 接口只用于定义类型"></a>19. 接口只用于定义类型</h2><h2 id="20-类层次优于标签类"><a href="#20-类层次优于标签类" class="headerlink" title="20. 类层次优于标签类"></a>20. 类层次优于标签类</h2><p>类层次，标签类</p><h2 id="21-用函数对象表示策略"><a href="#21-用函数对象表示策略" class="headerlink" title="21. 用函数对象表示策略"></a>21. 用函数对象表示策略</h2><h2 id="22-优先考虑静态成员类"><a href="#22-优先考虑静态成员类" class="headerlink" title="22. 优先考虑静态成员类"></a>22. 优先考虑静态成员类</h2><p>===========================</p><h1 id="第五章-泛型"><a href="#第五章-泛型" class="headerlink" title="第五章 泛型"></a>第五章 泛型</h1><p>===========================</p><h2 id="23-请不要再新代码中使用原生态类型"><a href="#23-请不要再新代码中使用原生态类型" class="headerlink" title="23. 请不要再新代码中使用原生态类型"></a>23. 请不要再新代码中使用原生态类型</h2><p>原生态类型</p><h2 id="24-消除非受检警告"><a href="#24-消除非受检警告" class="headerlink" title="24. 消除非受检警告"></a>24. 消除非受检警告</h2><p>有些警告比较难以消除，如果可以证明引起警告的代码是安全的，可以用@SuppressWarnings(“unchecked”)</p><h2 id="25-列表优于数组"><a href="#25-列表优于数组" class="headerlink" title="25. 列表优于数组"></a>25. 列表优于数组</h2><h2 id="26-优先考虑泛型"><a href="#26-优先考虑泛型" class="headerlink" title="26. 优先考虑泛型"></a>26. 优先考虑泛型</h2><h2 id="27-优先考虑泛型方法"><a href="#27-优先考虑泛型方法" class="headerlink" title="27. 优先考虑泛型方法"></a>27. 优先考虑泛型方法</h2><h2 id="28-利用有限的通配符来提升API的灵活性"><a href="#28-利用有限的通配符来提升API的灵活性" class="headerlink" title="28. 利用有限的通配符来提升API的灵活性"></a>28. 利用有限的通配符来提升API的灵活性</h2><h2 id="29-优先考虑类型安全的异构容器"><a href="#29-优先考虑类型安全的异构容器" class="headerlink" title="29. 优先考虑类型安全的异构容器"></a>29. 优先考虑类型安全的异构容器</h2><p>调用方法时候不会混乱即类型安全，所有键值都是不同类型的即异构。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Favorites</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">putFavorites</span><span class="params">(Class&lt;T&gt; type, T instance)</span></span>;</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getFavorite</span><span class="params">(Class&lt;T&gt; type)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>===========================</p><h1 id="第六章-枚举和注解"><a href="#第六章-枚举和注解" class="headerlink" title="第六章 枚举和注解"></a>第六章 枚举和注解</h1><p>===========================</p><h2 id="30-用Enum代替int常量"><a href="#30-用Enum代替int常量" class="headerlink" title="30. 用Enum代替int常量"></a>30. 用Enum代替int常量</h2><h2 id="31-用实例域代替序数"><a href="#31-用实例域代替序数" class="headerlink" title="31. 用实例域代替序数"></a>31. 用实例域代替序数</h2><h2 id="32-用EnumSet代替位域"><a href="#32-用EnumSet代替位域" class="headerlink" title="32. 用EnumSet代替位域"></a>32. 用EnumSet代替位域</h2><h2 id="33-用EnumMap代替序数索引"><a href="#33-用EnumMap代替序数索引" class="headerlink" title="33. 用EnumMap代替序数索引"></a>33. 用EnumMap代替序数索引</h2><h2 id="34-用接口模拟可伸缩的枚举"><a href="#34-用接口模拟可伸缩的枚举" class="headerlink" title="34. 用接口模拟可伸缩的枚举"></a>34. 用接口模拟可伸缩的枚举</h2><h2 id="35-注解优于命名模式"><a href="#35-注解优于命名模式" class="headerlink" title="35. 注解优于命名模式"></a>35. 注解优于命名模式</h2><h2 id="36-坚持使用Override注解"><a href="#36-坚持使用Override注解" class="headerlink" title="36. 坚持使用Override注解"></a>36. 坚持使用Override注解</h2><h2 id="37-用标记接口定义类型"><a href="#37-用标记接口定义类型" class="headerlink" title="37. 用标记接口定义类型"></a>37. 用标记接口定义类型</h2><p>===========================</p><h1 id="第七章-方法"><a href="#第七章-方法" class="headerlink" title="第七章 方法"></a>第七章 方法</h1><p>===========================</p><h2 id="38-检查参数的有效性"><a href="#38-检查参数的有效性" class="headerlink" title="38. 检查参数的有效性"></a>38. 检查参数的有效性</h2><h2 id="39-必要时进行保护性拷贝"><a href="#39-必要时进行保护性拷贝" class="headerlink" title="39. 必要时进行保护性拷贝"></a>39. 必要时进行保护性拷贝</h2><h2 id="40-谨慎设计方法签名"><a href="#40-谨慎设计方法签名" class="headerlink" title="40. 谨慎设计方法签名"></a>40. 谨慎设计方法签名</h2><h2 id="41-慎用重载"><a href="#41-慎用重载" class="headerlink" title="41. 慎用重载"></a>41. 慎用重载</h2><h2 id="42-慎用可变参数"><a href="#42-慎用可变参数" class="headerlink" title="42. 慎用可变参数"></a>42. 慎用可变参数</h2><h2 id="43-返回零长度的数组或集合而不是null"><a href="#43-返回零长度的数组或集合而不是null" class="headerlink" title="43. 返回零长度的数组或集合而不是null"></a>43. 返回零长度的数组或集合而不是null</h2><h2 id="44-为所有导出的API元素编写文档注释"><a href="#44-为所有导出的API元素编写文档注释" class="headerlink" title="44. 为所有导出的API元素编写文档注释"></a>44. 为所有导出的API元素编写文档注释</h2><p>===========================</p><h1 id="第八章-通用程序设计"><a href="#第八章-通用程序设计" class="headerlink" title="第八章 通用程序设计"></a>第八章 通用程序设计</h1><p>===========================</p><h2 id="45-将局部变量的作用域最小化"><a href="#45-将局部变量的作用域最小化" class="headerlink" title="45. 将局部变量的作用域最小化"></a>45. 将局部变量的作用域最小化</h2><h2 id="46-for-each循环优于传统的for循环"><a href="#46-for-each循环优于传统的for循环" class="headerlink" title="46. for-each循环优于传统的for循环"></a>46. for-each循环优于传统的for循环</h2><h2 id="47-了解和使用类库"><a href="#47-了解和使用类库" class="headerlink" title="47. 了解和使用类库"></a>47. 了解和使用类库</h2><h2 id="48-如果需要精确的答案，请避免使用float和double"><a href="#48-如果需要精确的答案，请避免使用float和double" class="headerlink" title="48. 如果需要精确的答案，请避免使用float和double"></a>48. 如果需要精确的答案，请避免使用float和double</h2><h2 id="49-基本类型优于装箱基本类型"><a href="#49-基本类型优于装箱基本类型" class="headerlink" title="49. 基本类型优于装箱基本类型"></a>49. 基本类型优于装箱基本类型</h2><h2 id="50-如果其他类型更合适，则尽量避免使用字符串"><a href="#50-如果其他类型更合适，则尽量避免使用字符串" class="headerlink" title="50. 如果其他类型更合适，则尽量避免使用字符串"></a>50. 如果其他类型更合适，则尽量避免使用字符串</h2><h2 id="51-当心字符串连接的性能"><a href="#51-当心字符串连接的性能" class="headerlink" title="51. 当心字符串连接的性能"></a>51. 当心字符串连接的性能</h2><h2 id="52-通过接口引用对象"><a href="#52-通过接口引用对象" class="headerlink" title="52. 通过接口引用对象"></a>52. 通过接口引用对象</h2><h2 id="53-接口优于反射机制"><a href="#53-接口优于反射机制" class="headerlink" title="53. 接口优于反射机制"></a>53. 接口优于反射机制</h2><p>接口与反射机制</p><h2 id="54-谨慎地使用本地方法"><a href="#54-谨慎地使用本地方法" class="headerlink" title="54. 谨慎地使用本地方法"></a>54. 谨慎地使用本地方法</h2><h2 id="55-谨慎地进行优化"><a href="#55-谨慎地进行优化" class="headerlink" title="55. 谨慎地进行优化"></a>55. 谨慎地进行优化</h2><h2 id="56-遵守普遍接受的命名惯例"><a href="#56-遵守普遍接受的命名惯例" class="headerlink" title="56. 遵守普遍接受的命名惯例"></a>56. 遵守普遍接受的命名惯例</h2><p>===========================</p><h1 id="第九章-异常"><a href="#第九章-异常" class="headerlink" title="第九章 异常"></a>第九章 异常</h1><p>===========================</p><h2 id="57-只针对异常情况才使用异常"><a href="#57-只针对异常情况才使用异常" class="headerlink" title="57. 只针对异常情况才使用异常"></a>57. 只针对异常情况才使用异常</h2><h2 id="58-对可恢复情况使用受检异常，对编程错误使用运行时异常"><a href="#58-对可恢复情况使用受检异常，对编程错误使用运行时异常" class="headerlink" title="58. 对可恢复情况使用受检异常，对编程错误使用运行时异常"></a>58. 对可恢复情况使用受检异常，对编程错误使用运行时异常</h2><p>受检异常</p><h2 id="59-避免不必要地使用受检的异常"><a href="#59-避免不必要地使用受检的异常" class="headerlink" title="59. 避免不必要地使用受检的异常"></a>59. 避免不必要地使用受检的异常</h2><h2 id="60-优先使用标准的异常"><a href="#60-优先使用标准的异常" class="headerlink" title="60. 优先使用标准的异常"></a>60. 优先使用标准的异常</h2><h2 id="61-抛出与抽象相对应的异常"><a href="#61-抛出与抽象相对应的异常" class="headerlink" title="61. 抛出与抽象相对应的异常"></a>61. 抛出与抽象相对应的异常</h2><h2 id="62-每个方法抛出的异常都要有文档"><a href="#62-每个方法抛出的异常都要有文档" class="headerlink" title="62. 每个方法抛出的异常都要有文档"></a>62. 每个方法抛出的异常都要有文档</h2><h2 id="63-在细节消息中包含能捕获失败的信息"><a href="#63-在细节消息中包含能捕获失败的信息" class="headerlink" title="63. 在细节消息中包含能捕获失败的信息"></a>63. 在细节消息中包含能捕获失败的信息</h2><h2 id="64-努力使失败保持原子性"><a href="#64-努力使失败保持原子性" class="headerlink" title="64. 努力使失败保持原子性"></a>64. 努力使失败保持原子性</h2><h2 id="65-不要忽略异常"><a href="#65-不要忽略异常" class="headerlink" title="65. 不要忽略异常"></a>65. 不要忽略异常</h2><p>===========================</p><h1 id="第十章-并发"><a href="#第十章-并发" class="headerlink" title="第十章 并发"></a>第十章 并发</h1><p>===========================</p><h2 id="66-同步访问共享的可变数据"><a href="#66-同步访问共享的可变数据" class="headerlink" title="66. 同步访问共享的可变数据"></a>66. 同步访问共享的可变数据</h2><h2 id="67-避免过度同步"><a href="#67-避免过度同步" class="headerlink" title="67. 避免过度同步"></a>67. 避免过度同步</h2><h2 id="68-executor和task优先于线程"><a href="#68-executor和task优先于线程" class="headerlink" title="68. executor和task优先于线程"></a>68. executor和task优先于线程</h2><h2 id="69-并发工具优先于wait和notify"><a href="#69-并发工具优先于wait和notify" class="headerlink" title="69. 并发工具优先于wait和notify"></a>69. 并发工具优先于wait和notify</h2><h2 id="70-线程安全性的文档化"><a href="#70-线程安全性的文档化" class="headerlink" title="70. 线程安全性的文档化"></a>70. 线程安全性的文档化</h2><h2 id="71-慎用延迟初始化"><a href="#71-慎用延迟初始化" class="headerlink" title="71. 慎用延迟初始化"></a>71. 慎用延迟初始化</h2><h2 id="72-不要依赖线程调度器"><a href="#72-不要依赖线程调度器" class="headerlink" title="72. 不要依赖线程调度器"></a>72. 不要依赖线程调度器</h2><h2 id="73-避免使用线程组"><a href="#73-避免使用线程组" class="headerlink" title="73. 避免使用线程组"></a>73. 避免使用线程组</h2><p>===========================</p><h1 id="第十一章-序列化"><a href="#第十一章-序列化" class="headerlink" title="第十一章 序列化"></a>第十一章 序列化</h1><p>===========================</p><h2 id="74-谨慎地实现Serializable接口"><a href="#74-谨慎地实现Serializable接口" class="headerlink" title="74. 谨慎地实现Serializable接口"></a>74. 谨慎地实现Serializable接口</h2><h2 id="75-考虑使用自定义的序列化形式"><a href="#75-考虑使用自定义的序列化形式" class="headerlink" title="75. 考虑使用自定义的序列化形式"></a>75. 考虑使用自定义的序列化形式</h2><h2 id="76-保护性地编写readObject方法"><a href="#76-保护性地编写readObject方法" class="headerlink" title="76. 保护性地编写readObject方法"></a>76. 保护性地编写readObject方法</h2><h2 id="77-对于实例控制，枚举类型优先于readResolve"><a href="#77-对于实例控制，枚举类型优先于readResolve" class="headerlink" title="77. 对于实例控制，枚举类型优先于readResolve"></a>77. 对于实例控制，枚举类型优先于readResolve</h2><h2 id="78-考虑使用序列化代理代替序列化实例"><a href="#78-考虑使用序列化代理代替序列化实例" class="headerlink" title="78. 考虑使用序列化代理代替序列化实例"></a>78. 考虑使用序列化代理代替序列化实例</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第一章-开始&quot;&gt;&lt;a href=&quot;#第一章-开始&quot; class=&quot;headerlink&quot; title=&quot;第一章 开始&quot;&gt;&lt;/a&gt;第一章 开始&lt;/h1&gt;&lt;p&gt;effective java 主要涉及java.lang、java.util基本类库，某种程度上涉及java.util.concurrent和java.io共78条建议。&lt;/p&gt;
    
    </summary>
    
      <category term="计算机软件" scheme="https://tanshuai1001.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="java" scheme="https://tanshuai1001.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>设计模式笔记</title>
    <link href="https://tanshuai1001.github.io/2018/12/24/design-model/"/>
    <id>https://tanshuai1001.github.io/2018/12/24/design-model/</id>
    <published>2018-12-24T01:37:54.000Z</published>
    <updated>2019-01-06T07:44:51.010Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h1><p>根据模式的目的可分为：创建型，结构型和行为型<br><img src="/2018/12/24/design-model/outline.png" alt="概览"></p><p>JavaScript设计模式相关书籍：<a href="https://addyosmani.com/resources/essentialjsdesignpatterns/book/" target="_blank" rel="noopener">《Learning JavaScript Design Patterns》</a> by Addy Osmani</p><p>Java相关<a href="https://quanke.gitbooks.io/design-pattern-java/content/" target="_blank" rel="noopener">在线书籍</a>和<a href="https://github.com/quanke/design-pattern-java-source-code" target="_blank" rel="noopener">代码GitHub地址</a></p><p><a href="https://juejin.im/post/5c2e10a76fb9a049c0432697" target="_blank" rel="noopener">《JavaScript设计模式与开发实践》最全知识点汇总大全</a></p><a id="more"></a><h1 id="面相对象设计原则"><a href="#面相对象设计原则" class="headerlink" title="面相对象设计原则"></a>面相对象设计原则</h1><h2 id="1-开闭原则"><a href="#1-开闭原则" class="headerlink" title="1. 开闭原则"></a>1. 开闭原则</h2><p>一个软件实体应当对扩展开放，对修改关闭。即软件实体应尽量在不修改原有代码的情况下进行扩展。</p><h2 id="2-里氏替换原则"><a href="#2-里氏替换原则" class="headerlink" title="2. 里氏替换原则"></a>2. 里氏替换原则</h2><p>所有引用基类（父类）的地方必须能透明地使用其子类的对象。</p><h2 id="3-依赖转换原则"><a href="#3-依赖转换原则" class="headerlink" title="3. 依赖转换原则"></a>3. 依赖转换原则</h2><p>抽象不应该依赖于细节，细节应当依赖于抽象。</p><h2 id="4-单一职责原则"><a href="#4-单一职责原则" class="headerlink" title="4. 单一职责原则"></a>4. 单一职责原则</h2><p>一个类只负责一个功能领域中的相应职责。</p><h2 id="5-合成复用原则"><a href="#5-合成复用原则" class="headerlink" title="5. 合成复用原则"></a>5. 合成复用原则</h2><p>尽量使用对象组合，而不是继承来达到复用的目的。</p><h2 id="6-迪米特法则"><a href="#6-迪米特法则" class="headerlink" title="6. 迪米特法则"></a>6. 迪米特法则</h2><p>一个软件实体应当尽可能少地与其他实体发生相互作用。</p><h2 id="7-接口隔离原则"><a href="#7-接口隔离原则" class="headerlink" title="7. 接口隔离原则"></a>7. 接口隔离原则</h2><p>使用多个专门的接口，而不使用单一的总接口，即客户端不应该依赖那些它不需要的接口。</p><h1 id="使用频率"><a href="#使用频率" class="headerlink" title="使用频率"></a>使用频率</h1><p>高频率使用的模式: 工厂方法，抽象工厂，外观模式，迭代模式，观察者模式<br>常用使用的模式：单例模式，适配器模式，代理模式，组合模式，策略模式，命令模式</p><p><a href="https://juejin.im/post/5c2b8ba1f265da61407f01bf" target="_blank" rel="noopener">单例模式有几种写法</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概览&quot;&gt;&lt;a href=&quot;#概览&quot; class=&quot;headerlink&quot; title=&quot;概览&quot;&gt;&lt;/a&gt;概览&lt;/h1&gt;&lt;p&gt;根据模式的目的可分为：创建型，结构型和行为型&lt;br&gt;&lt;img src=&quot;/2018/12/24/design-model/outline.png&quot; alt=&quot;概览&quot;&gt;&lt;/p&gt;
&lt;p&gt;JavaScript设计模式相关书籍：&lt;a href=&quot;https://addyosmani.com/resources/essentialjsdesignpatterns/book/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《Learning JavaScript Design Patterns》&lt;/a&gt; by Addy Osmani&lt;/p&gt;
&lt;p&gt;Java相关&lt;a href=&quot;https://quanke.gitbooks.io/design-pattern-java/content/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;在线书籍&lt;/a&gt;和&lt;a href=&quot;https://github.com/quanke/design-pattern-java-source-code&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;代码GitHub地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://juejin.im/post/5c2e10a76fb9a049c0432697&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《JavaScript设计模式与开发实践》最全知识点汇总大全&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="计算机软件" scheme="https://tanshuai1001.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="designModel" scheme="https://tanshuai1001.github.io/tags/designModel/"/>
    
  </entry>
  
  <entry>
    <title>mysql常用命令</title>
    <link href="https://tanshuai1001.github.io/2018/05/13/mysql-frequently-used/"/>
    <id>https://tanshuai1001.github.io/2018/05/13/mysql-frequently-used/</id>
    <published>2018-05-13T15:52:44.000Z</published>
    <updated>2018-12-28T08:09:32.928Z</updated>
    
    <content type="html"><![CDATA[<h1 id="新建数据库和归属用户"><a href="#新建数据库和归属用户" class="headerlink" title="新建数据库和归属用户"></a>新建数据库和归属用户</h1><p>在服务器上经常用mysql作不同用途，每个用途新建一个database和对应用户将访问权限分离开是良好的习惯。快速而方便地创建MySQL用户和数据库的语句：</p><p>1.创建数据库</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE databasename;</span><br></pre></td></tr></table></figure><p>2.把数据库的所有权限归属到对应host下的用户并设置密码</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON databasename.* TO </span><br><span class="line">&quot;username&quot;@&quot;hostname&quot; IDENTIFIED BY &quot;password&quot;;</span><br></pre></td></tr></table></figure><p>3.FLUSH清除或者重新加载内部缓存，使权限生效</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;新建数据库和归属用户&quot;&gt;&lt;a href=&quot;#新建数据库和归属用户&quot; class=&quot;headerlink&quot; title=&quot;新建数据库和归属用户&quot;&gt;&lt;/a&gt;新建数据库和归属用户&lt;/h1&gt;&lt;p&gt;在服务器上经常用mysql作不同用途，每个用途新建一个database和对应用户将访问权限分离开是良好的习惯。快速而方便地创建MySQL用户和数据库的语句：&lt;/p&gt;
&lt;p&gt;1.创建数据库&lt;/p&gt;
 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CREATE DATABASE databasename;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2.把数据库的所有权限归属到对应host下的用户并设置密码&lt;/p&gt;
 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;GRANT ALL PRIVILEGES ON databasename.* TO &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;username&amp;quot;@&amp;quot;hostname&amp;quot; IDENTIFIED BY &amp;quot;password&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;3.FLUSH清除或者重新加载内部缓存，使权限生效&lt;/p&gt;
 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;FLUSH PRIVILEGES;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="速查手册" scheme="https://tanshuai1001.github.io/categories/%E9%80%9F%E6%9F%A5%E6%89%8B%E5%86%8C/"/>
    
    
      <category term="database" scheme="https://tanshuai1001.github.io/tags/database/"/>
    
      <category term="mysql" scheme="https://tanshuai1001.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Hexo与NexT、markdown部分使用方法</title>
    <link href="https://tanshuai1001.github.io/2018/03/04/hello-world/"/>
    <id>https://tanshuai1001.github.io/2018/03/04/hello-world/</id>
    <published>2018-03-04T09:20:13.508Z</published>
    <updated>2018-12-28T06:37:56.197Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Hexo-Quick-Start-中文文档"><a href="#Hexo-Quick-Start-中文文档" class="headerlink" title="Hexo Quick Start 中文文档"></a>Hexo Quick Start <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">中文文档</a></h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server -p 5000</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><hr><a id="more"></a><h2 id="NexT"><a href="#NexT" class="headerlink" title="NexT"></a>NexT</h2><p>fancybox是比较好的基于jQuery的<a href="https://github.com/theme-next/theme-next-fancybox3" target="_blank" rel="noopener">图片预览插件</a></p><hr><h2 id="Markdown速记"><a href="#Markdown速记" class="headerlink" title="Markdown速记"></a>Markdown速记</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>N个#号代表N级标题</p><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><p>加粗<br>要加粗的文字左右分别用两个*号包起来</p><p>斜体<br>要倾斜的文字左右分别用一个*号包起来</p><p>斜体加粗<br>要倾斜和加粗的文字左右分别用三个*号包起来</p><p>删除线<br>要加删除线的文字左右分别用两个~~号包起来</p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;<br>n个…</p><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>三个或者三个以上的 - 或者 * 都可以。</p><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![图片alt](图片地址 &apos;&apos;图片title&apos;&apos;)</span><br></pre></td></tr></table></figure><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[超链接名](超链接地址 &quot;超链接title&quot;)</span><br><span class="line">title可加可不加</span><br></pre></td></tr></table></figure><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>无序列表用 - + * 任何一种都可以<br>有序列表数字加点<br>列表嵌套<br>上一级和下一级之间缩进三个空格即可</p><ol><li>第一章<ol><li>第一节</li><li>第二节</li></ol></li><li>第二章</li></ol><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">---|:--:|---:</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br></pre></td></tr></table></figure><h3 id="代码标签"><a href="#代码标签" class="headerlink" title="代码标签"></a>代码标签</h3><p>单行代码：代码之间分别用一个反引号`包起来<br>代码块：代码之间分别用三个反引号<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 字体、字号、颜色</span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">&lt;font face=&quot;黑体&quot;&gt;黑体&lt;/font&gt;</span><br><span class="line">&lt;font face=&quot;微软雅黑&quot;&gt;微软雅黑&lt;/font&gt;</span><br><span class="line">&lt;font color=#0099ff size=12 face=&quot;黑体&quot;&gt;黑体&lt;/font&gt;</span><br><span class="line">&lt;font color=gray size=5&gt;gray&lt;/font&gt;</span><br></pre></td></tr></table></figure></p><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p>需要插件支持，Hexo插件 hexo-filter-flowchart<br>与代码块类似，语言写flow，内容按flow语法写就行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: 开始</span><br><span class="line">e=&gt;end: 登录</span><br><span class="line">io1=&gt;inputoutput: 输入用户名密码</span><br><span class="line">sub1=&gt;subroutine: 数据库查询子类</span><br><span class="line">cond=&gt;condition: 是否有此用户</span><br><span class="line">cond2=&gt;condition: 密码是否正确</span><br><span class="line">op=&gt;operation: 读入用户信息</span><br><span class="line"></span><br><span class="line">st-&gt;io1-&gt;sub1-&gt;cond</span><br><span class="line">cond(yes,right)-&gt;cond2</span><br><span class="line">cond(no)-&gt;io1(right)</span><br><span class="line">cond2(yes,right)-&gt;op-&gt;e</span><br><span class="line">cond2(no)-&gt;io1</span><br></pre></td></tr></table></figure><h3 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h3><p>页面头部打开渲染开关<code>mathjax: true</code><br>行内<code>$...$</code><br>行间居中<code>$$...$$</code></p><ol><li><p>上下标<br>^ 表示上标，_ 表示下标。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$a_&#123;1&#125;$,$x^&#123;2&#125;$,$e^&#123;-\alpha t&#125;$,$a^&#123;i&#125;_&#123;ij&#125;$</span><br><span class="line">$$\sideset&#123;^xy&#125;&#123;^xy&#125;\bigotimes$$</span><br></pre></td></tr></table></figure><p>$a_{1}$,$x^{2}$,$e^{-\alpha t}$,$a^{i}_{ij}$<br>$$\sideset{^xy}{^xy}\bigotimes$$</p></li><li><p>平方根<br>平方根输入命令为 \sqrt，n次方根命令为 \sqrt[n]<br>$\sqrt{x}$  $\sqrt{x^2}+\sqrt{y}$  $\sqrt[3]{2}$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$\sqrt&#123;x&#125;$  $\sqrt&#123;x^2&#125;+\sqrt&#123;y&#125;$  $\sqrt[3]&#123;2&#125;$</span><br></pre></td></tr></table></figure></li><li><p>水平线<br>使用 \overline 和 \underline 分别在表达式上下方画出水平线<br>$\overline{m + n}$  $\underline{m + n}$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$\overline&#123;m + n&#125;$  $\underline&#123;m + n&#125;$</span><br></pre></td></tr></table></figure></li><li><p>水平大括号<br>命令 \overbrace 和 \underrace，效果如下<br>$\underbrace{a+b+\cdots+z}$<br>$\overbrace{a+b+\cdots+z}$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$\underbrace&#123;a+b+\cdots+z&#125;$</span><br><span class="line">$\overbrace&#123;a+b+\cdots+z&#125;$</span><br></pre></td></tr></table></figure></li><li><p>矢量<br>矢量的命令是 \vec，用于单个字母的向量表示。\overrightarrow 和\overleftarrow 分别表示向右和向左的向量箭头<br>$\vec{a}$  $\overrightarrow{AB}$  $\overleftarrow{BA}$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$\vec&#123;a&#125;$  $\overrightarrow&#123;AB&#125;$  $\overleftarrow&#123;BA&#125;$</span><br></pre></td></tr></table></figure></li><li><p>分数<br>分数使用 \frac{…}{…}<br>$1\frac{1}{2}$  $\frac{x^2}{k+1}$  $x^{1/2}$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$1\frac&#123;1&#125;&#123;2&#125;$  $\frac&#123;x^2&#125;&#123;k+1&#125;$  $x^&#123;1/2&#125;$</span><br></pre></td></tr></table></figure></li><li><p>积分运算符<br>积分运算符使用 \int 生成。求和运算符使用 \sum 生成。乘积运算符使用 \prod 生成。上下限使用^ 和_ 命令，类似 上下标<br>$\sum_{i=1}^{n}$  $\int_{0}^{\frac{\pi}{2}}$  $\prod_\epsilon$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$\sum_&#123;i=1&#125;^&#123;n&#125;$  $\int_&#123;0&#125;^&#123;\frac&#123;\pi&#125;&#123;2&#125;&#125;$  $\prod_\epsilon$</span><br></pre></td></tr></table></figure></li><li><p>希腊字母<br>$\alpha$  $\beta$ $\gamma$  $\delta$  $\epsilon$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$\alpha$  $\beta$ $\gamma$  $\delta$  $\epsilon$</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Hexo-Quick-Start-中文文档&quot;&gt;&lt;a href=&quot;#Hexo-Quick-Start-中文文档&quot; class=&quot;headerlink&quot; title=&quot;Hexo Quick Start 中文文档&quot;&gt;&lt;/a&gt;Hexo Quick Start &lt;a href=&quot;https://hexo.io/zh-cn/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;中文文档&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo server -p 5000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Generate-static-files&quot;&gt;&lt;a href=&quot;#Generate-static-files&quot; class=&quot;headerlink&quot; title=&quot;Generate static files&quot;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/generating.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Deploy-to-remote-sites&quot;&gt;&lt;a href=&quot;#Deploy-to-remote-sites&quot; class=&quot;headerlink&quot; title=&quot;Deploy to remote sites&quot;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/deployment.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="速查手册" scheme="https://tanshuai1001.github.io/categories/%E9%80%9F%E6%9F%A5%E6%89%8B%E5%86%8C/"/>
    
    
      <category term="markdown" scheme="https://tanshuai1001.github.io/tags/markdown/"/>
    
      <category term="hexo" scheme="https://tanshuai1001.github.io/tags/hexo/"/>
    
      <category term="NexT" scheme="https://tanshuai1001.github.io/tags/NexT/"/>
    
  </entry>
  
</feed>
