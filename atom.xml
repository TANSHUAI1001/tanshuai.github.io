<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SHuai&#39;s journal</title>
  
  <subtitle>the records of life and work</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tanshuai1001.github.io/"/>
  <updated>2018-12-24T08:58:14.258Z</updated>
  <id>https://tanshuai1001.github.io/</id>
  
  <author>
    <name>Tan Shuai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>effective java</title>
    <link href="https://tanshuai1001.github.io/2018/12/24/effective-java/"/>
    <id>https://tanshuai1001.github.io/2018/12/24/effective-java/</id>
    <published>2018-12-24T06:30:01.000Z</published>
    <updated>2018-12-24T08:58:14.258Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-开始"><a href="#第一章-开始" class="headerlink" title="第一章 开始"></a>第一章 开始</h1><p>effective java 主要涉及java.lang、java.util基本类库，某种程度上涉及java.util.concurrent和java.io共78条建议。</p><a id="more"></a><h1 id="第二章-创建和销毁对象"><a href="#第二章-创建和销毁对象" class="headerlink" title="第二章 创建和销毁对象"></a>第二章 创建和销毁对象</h1><p>===========================</p><h2 id="1-考虑使用静态方法工厂代替构造器"><a href="#1-考虑使用静态方法工厂代替构造器" class="headerlink" title="1. 考虑使用静态方法工厂代替构造器"></a>1. 考虑使用静态方法工厂代替构造器</h2><h2 id="2-遇到多个构造器参数时考虑用构建器"><a href="#2-遇到多个构造器参数时考虑用构建器" class="headerlink" title="2. 遇到多个构造器参数时考虑用构建器"></a>2. 遇到多个构造器参数时考虑用构建器</h2><h2 id="3-用私有构造器或者枚举类型强化Singleton属性"><a href="#3-用私有构造器或者枚举类型强化Singleton属性" class="headerlink" title="3. 用私有构造器或者枚举类型强化Singleton属性"></a>3. 用私有构造器或者枚举类型强化Singleton属性</h2><h2 id="4-通过私有构造器强化不可实例化的能力"><a href="#4-通过私有构造器强化不可实例化的能力" class="headerlink" title="4. 通过私有构造器强化不可实例化的能力"></a>4. 通过私有构造器强化不可实例化的能力</h2><h2 id="5-避免创建不必要的对象"><a href="#5-避免创建不必要的对象" class="headerlink" title="5. 避免创建不必要的对象"></a>5. 避免创建不必要的对象</h2><h2 id="6-消除过期的对象引用"><a href="#6-消除过期的对象引用" class="headerlink" title="6. 消除过期的对象引用"></a>6. 消除过期的对象引用</h2><h2 id="7-避免使用终结方法-finalizer"><a href="#7-避免使用终结方法-finalizer" class="headerlink" title="7. 避免使用终结方法(finalizer)"></a>7. 避免使用终结方法(finalizer)</h2><p>===========================</p><h1 id="第三章-所有对象通用方法"><a href="#第三章-所有对象通用方法" class="headerlink" title="第三章 所有对象通用方法"></a>第三章 所有对象通用方法</h1><p>===========================</p><h2 id="8-覆盖equals时遵守通用约定"><a href="#8-覆盖equals时遵守通用约定" class="headerlink" title="8. 覆盖equals时遵守通用约定"></a>8. 覆盖equals时遵守通用约定</h2><h2 id="9-覆盖equals总是要覆盖hashCode"><a href="#9-覆盖equals总是要覆盖hashCode" class="headerlink" title="9. 覆盖equals总是要覆盖hashCode"></a>9. 覆盖equals总是要覆盖hashCode</h2><h2 id="10-始终要覆盖toString"><a href="#10-始终要覆盖toString" class="headerlink" title="10. 始终要覆盖toString"></a>10. 始终要覆盖toString</h2><h2 id="11-谨慎覆盖clone"><a href="#11-谨慎覆盖clone" class="headerlink" title="11. 谨慎覆盖clone"></a>11. 谨慎覆盖clone</h2><h2 id="12-考虑实现Comparable接口"><a href="#12-考虑实现Comparable接口" class="headerlink" title="12. 考虑实现Comparable接口"></a>12. 考虑实现Comparable接口</h2><p>===========================</p><h1 id="第四章-类和接口"><a href="#第四章-类和接口" class="headerlink" title="第四章 类和接口"></a>第四章 类和接口</h1><p>===========================</p><h2 id="13-使类和成员的可访问性最小化"><a href="#13-使类和成员的可访问性最小化" class="headerlink" title="13. 使类和成员的可访问性最小化"></a>13. 使类和成员的可访问性最小化</h2><h2 id="14-在公有类中使用访问方法而不是公有域"><a href="#14-在公有类中使用访问方法而不是公有域" class="headerlink" title="14. 在公有类中使用访问方法而不是公有域"></a>14. 在公有类中使用访问方法而不是公有域</h2><h2 id="15-使可变性最小化"><a href="#15-使可变性最小化" class="headerlink" title="15. 使可变性最小化"></a>15. 使可变性最小化</h2><h2 id="16-复合优先于继承"><a href="#16-复合优先于继承" class="headerlink" title="16. 复合优先于继承"></a>16. 复合优先于继承</h2><p>复合</p><h2 id="17-要么为继承而设计并提供文档说明，要么就禁止继承"><a href="#17-要么为继承而设计并提供文档说明，要么就禁止继承" class="headerlink" title="17. 要么为继承而设计并提供文档说明，要么就禁止继承"></a>17. 要么为继承而设计并提供文档说明，要么就禁止继承</h2><h2 id="18-接口优于抽象类"><a href="#18-接口优于抽象类" class="headerlink" title="18. 接口优于抽象类"></a>18. 接口优于抽象类</h2><p>接口</p><h2 id="19-接口只用于定义类型"><a href="#19-接口只用于定义类型" class="headerlink" title="19. 接口只用于定义类型"></a>19. 接口只用于定义类型</h2><h2 id="20-类层次优于标签类"><a href="#20-类层次优于标签类" class="headerlink" title="20. 类层次优于标签类"></a>20. 类层次优于标签类</h2><p>类层次，标签类</p><h2 id="21-用函数对象表示策略"><a href="#21-用函数对象表示策略" class="headerlink" title="21. 用函数对象表示策略"></a>21. 用函数对象表示策略</h2><h2 id="22-优先考虑静态成员类"><a href="#22-优先考虑静态成员类" class="headerlink" title="22. 优先考虑静态成员类"></a>22. 优先考虑静态成员类</h2><p>===========================</p><h1 id="第五章-泛型"><a href="#第五章-泛型" class="headerlink" title="第五章 泛型"></a>第五章 泛型</h1><p>===========================</p><h2 id="23-请不要再新代码中使用原生态类型"><a href="#23-请不要再新代码中使用原生态类型" class="headerlink" title="23. 请不要再新代码中使用原生态类型"></a>23. 请不要再新代码中使用原生态类型</h2><p>原生态类型</p><h2 id="24-消除非受检警告"><a href="#24-消除非受检警告" class="headerlink" title="24. 消除非受检警告"></a>24. 消除非受检警告</h2><p>有些警告比较难以消除，如果可以证明引起警告的代码是安全的，可以用@SuppressWarnings(“unchecked”)</p><h2 id="25-列表优于数组"><a href="#25-列表优于数组" class="headerlink" title="25. 列表优于数组"></a>25. 列表优于数组</h2><h2 id="26-优先考虑泛型"><a href="#26-优先考虑泛型" class="headerlink" title="26. 优先考虑泛型"></a>26. 优先考虑泛型</h2><h2 id="27-优先考虑泛型方法"><a href="#27-优先考虑泛型方法" class="headerlink" title="27. 优先考虑泛型方法"></a>27. 优先考虑泛型方法</h2><h2 id="28-利用有限的通配符来提升API的灵活性"><a href="#28-利用有限的通配符来提升API的灵活性" class="headerlink" title="28. 利用有限的通配符来提升API的灵活性"></a>28. 利用有限的通配符来提升API的灵活性</h2><h2 id="29-优先考虑类型安全的异构容器"><a href="#29-优先考虑类型安全的异构容器" class="headerlink" title="29. 优先考虑类型安全的异构容器"></a>29. 优先考虑类型安全的异构容器</h2><p>调用方法时候不会混乱即类型安全，所有键值都是不同类型的即异构。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Favorites</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">putFavorites</span><span class="params">(Class&lt;T&gt; type, T instance)</span></span>;</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getFavorite</span><span class="params">(Class&lt;T&gt; type)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>===========================</p><h1 id="第六章-枚举和注解"><a href="#第六章-枚举和注解" class="headerlink" title="第六章 枚举和注解"></a>第六章 枚举和注解</h1><p>===========================</p><h2 id="30-用Enum代替int常量"><a href="#30-用Enum代替int常量" class="headerlink" title="30. 用Enum代替int常量"></a>30. 用Enum代替int常量</h2><h2 id="31-用实例域代替序数"><a href="#31-用实例域代替序数" class="headerlink" title="31. 用实例域代替序数"></a>31. 用实例域代替序数</h2><h2 id="32-用EnumSet代替位域"><a href="#32-用EnumSet代替位域" class="headerlink" title="32. 用EnumSet代替位域"></a>32. 用EnumSet代替位域</h2><h2 id="33-用EnumMap代替序数索引"><a href="#33-用EnumMap代替序数索引" class="headerlink" title="33. 用EnumMap代替序数索引"></a>33. 用EnumMap代替序数索引</h2><h2 id="34-用接口模拟可伸缩的枚举"><a href="#34-用接口模拟可伸缩的枚举" class="headerlink" title="34. 用接口模拟可伸缩的枚举"></a>34. 用接口模拟可伸缩的枚举</h2><h2 id="35-注解优于命名模式"><a href="#35-注解优于命名模式" class="headerlink" title="35. 注解优于命名模式"></a>35. 注解优于命名模式</h2><h2 id="36-坚持使用Override注解"><a href="#36-坚持使用Override注解" class="headerlink" title="36. 坚持使用Override注解"></a>36. 坚持使用Override注解</h2><h2 id="37-用标记接口定义类型"><a href="#37-用标记接口定义类型" class="headerlink" title="37. 用标记接口定义类型"></a>37. 用标记接口定义类型</h2><p>===========================</p><h1 id="第七章-方法"><a href="#第七章-方法" class="headerlink" title="第七章 方法"></a>第七章 方法</h1><p>===========================</p><h2 id="38-检查参数的有效性"><a href="#38-检查参数的有效性" class="headerlink" title="38. 检查参数的有效性"></a>38. 检查参数的有效性</h2><h2 id="39-必要时进行保护性拷贝"><a href="#39-必要时进行保护性拷贝" class="headerlink" title="39. 必要时进行保护性拷贝"></a>39. 必要时进行保护性拷贝</h2><h2 id="40-谨慎设计方法签名"><a href="#40-谨慎设计方法签名" class="headerlink" title="40. 谨慎设计方法签名"></a>40. 谨慎设计方法签名</h2><h2 id="41-慎用重载"><a href="#41-慎用重载" class="headerlink" title="41. 慎用重载"></a>41. 慎用重载</h2><h2 id="42-慎用可变参数"><a href="#42-慎用可变参数" class="headerlink" title="42. 慎用可变参数"></a>42. 慎用可变参数</h2><h2 id="43-返回零长度的数组或集合而不是null"><a href="#43-返回零长度的数组或集合而不是null" class="headerlink" title="43. 返回零长度的数组或集合而不是null"></a>43. 返回零长度的数组或集合而不是null</h2><h2 id="44-为所有导出的API元素编写文档注释"><a href="#44-为所有导出的API元素编写文档注释" class="headerlink" title="44. 为所有导出的API元素编写文档注释"></a>44. 为所有导出的API元素编写文档注释</h2><p>===========================</p><h1 id="第八章-通用程序设计"><a href="#第八章-通用程序设计" class="headerlink" title="第八章 通用程序设计"></a>第八章 通用程序设计</h1><p>===========================</p><h2 id="45-将局部变量的作用域最小化"><a href="#45-将局部变量的作用域最小化" class="headerlink" title="45. 将局部变量的作用域最小化"></a>45. 将局部变量的作用域最小化</h2><h2 id="46-for-each循环优于传统的for循环"><a href="#46-for-each循环优于传统的for循环" class="headerlink" title="46. for-each循环优于传统的for循环"></a>46. for-each循环优于传统的for循环</h2><h2 id="47-了解和使用类库"><a href="#47-了解和使用类库" class="headerlink" title="47. 了解和使用类库"></a>47. 了解和使用类库</h2><h2 id="48-如果需要精确的答案，请避免使用float和double"><a href="#48-如果需要精确的答案，请避免使用float和double" class="headerlink" title="48. 如果需要精确的答案，请避免使用float和double"></a>48. 如果需要精确的答案，请避免使用float和double</h2><h2 id="49-基本类型优于装箱基本类型"><a href="#49-基本类型优于装箱基本类型" class="headerlink" title="49. 基本类型优于装箱基本类型"></a>49. 基本类型优于装箱基本类型</h2><h2 id="50-如果其他类型更合适，则尽量避免使用字符串"><a href="#50-如果其他类型更合适，则尽量避免使用字符串" class="headerlink" title="50. 如果其他类型更合适，则尽量避免使用字符串"></a>50. 如果其他类型更合适，则尽量避免使用字符串</h2><h2 id="51-当心字符串连接的性能"><a href="#51-当心字符串连接的性能" class="headerlink" title="51. 当心字符串连接的性能"></a>51. 当心字符串连接的性能</h2><h2 id="52-通过接口引用对象"><a href="#52-通过接口引用对象" class="headerlink" title="52. 通过接口引用对象"></a>52. 通过接口引用对象</h2><h2 id="53-接口优于反射机制"><a href="#53-接口优于反射机制" class="headerlink" title="53. 接口优于反射机制"></a>53. 接口优于反射机制</h2><p>接口与反射机制</p><h2 id="54-谨慎地使用本地方法"><a href="#54-谨慎地使用本地方法" class="headerlink" title="54. 谨慎地使用本地方法"></a>54. 谨慎地使用本地方法</h2><h2 id="55-谨慎地进行优化"><a href="#55-谨慎地进行优化" class="headerlink" title="55. 谨慎地进行优化"></a>55. 谨慎地进行优化</h2><h2 id="56-遵守普遍接受的命名惯例"><a href="#56-遵守普遍接受的命名惯例" class="headerlink" title="56. 遵守普遍接受的命名惯例"></a>56. 遵守普遍接受的命名惯例</h2><p>===========================</p><h1 id="第九章-异常"><a href="#第九章-异常" class="headerlink" title="第九章 异常"></a>第九章 异常</h1><p>===========================</p><h2 id="57-只针对异常情况才使用异常"><a href="#57-只针对异常情况才使用异常" class="headerlink" title="57. 只针对异常情况才使用异常"></a>57. 只针对异常情况才使用异常</h2><h2 id="58-对可恢复情况使用受检异常，对编程错误使用运行时异常"><a href="#58-对可恢复情况使用受检异常，对编程错误使用运行时异常" class="headerlink" title="58. 对可恢复情况使用受检异常，对编程错误使用运行时异常"></a>58. 对可恢复情况使用受检异常，对编程错误使用运行时异常</h2><p>受检异常</p><h2 id="59-避免不必要地使用受检的异常"><a href="#59-避免不必要地使用受检的异常" class="headerlink" title="59. 避免不必要地使用受检的异常"></a>59. 避免不必要地使用受检的异常</h2><h2 id="60-优先使用标准的异常"><a href="#60-优先使用标准的异常" class="headerlink" title="60. 优先使用标准的异常"></a>60. 优先使用标准的异常</h2><h2 id="61-抛出与抽象相对应的异常"><a href="#61-抛出与抽象相对应的异常" class="headerlink" title="61. 抛出与抽象相对应的异常"></a>61. 抛出与抽象相对应的异常</h2><h2 id="62-每个方法抛出的异常都要有文档"><a href="#62-每个方法抛出的异常都要有文档" class="headerlink" title="62. 每个方法抛出的异常都要有文档"></a>62. 每个方法抛出的异常都要有文档</h2><h2 id="63-在细节消息中包含能捕获失败的信息"><a href="#63-在细节消息中包含能捕获失败的信息" class="headerlink" title="63. 在细节消息中包含能捕获失败的信息"></a>63. 在细节消息中包含能捕获失败的信息</h2><h2 id="64-努力使失败保持原子性"><a href="#64-努力使失败保持原子性" class="headerlink" title="64. 努力使失败保持原子性"></a>64. 努力使失败保持原子性</h2><h2 id="65-不要忽略异常"><a href="#65-不要忽略异常" class="headerlink" title="65. 不要忽略异常"></a>65. 不要忽略异常</h2><p>===========================</p><h1 id="第十章-并发"><a href="#第十章-并发" class="headerlink" title="第十章 并发"></a>第十章 并发</h1><p>===========================</p><h2 id="66-同步访问共享的可变数据"><a href="#66-同步访问共享的可变数据" class="headerlink" title="66. 同步访问共享的可变数据"></a>66. 同步访问共享的可变数据</h2><h2 id="67-避免过度同步"><a href="#67-避免过度同步" class="headerlink" title="67. 避免过度同步"></a>67. 避免过度同步</h2><h2 id="68-executor和task优先于线程"><a href="#68-executor和task优先于线程" class="headerlink" title="68. executor和task优先于线程"></a>68. executor和task优先于线程</h2><h2 id="69-并发工具优先于wait和notify"><a href="#69-并发工具优先于wait和notify" class="headerlink" title="69. 并发工具优先于wait和notify"></a>69. 并发工具优先于wait和notify</h2><h2 id="70-线程安全性的文档化"><a href="#70-线程安全性的文档化" class="headerlink" title="70. 线程安全性的文档化"></a>70. 线程安全性的文档化</h2><h2 id="71-慎用延迟初始化"><a href="#71-慎用延迟初始化" class="headerlink" title="71. 慎用延迟初始化"></a>71. 慎用延迟初始化</h2><h2 id="72-不要依赖线程调度器"><a href="#72-不要依赖线程调度器" class="headerlink" title="72. 不要依赖线程调度器"></a>72. 不要依赖线程调度器</h2><h2 id="73-避免使用线程组"><a href="#73-避免使用线程组" class="headerlink" title="73. 避免使用线程组"></a>73. 避免使用线程组</h2><p>===========================</p><h1 id="第十一章-序列化"><a href="#第十一章-序列化" class="headerlink" title="第十一章 序列化"></a>第十一章 序列化</h1><p>===========================</p><h2 id="74-谨慎地实现Serializable接口"><a href="#74-谨慎地实现Serializable接口" class="headerlink" title="74. 谨慎地实现Serializable接口"></a>74. 谨慎地实现Serializable接口</h2><h2 id="75-考虑使用自定义的序列化形式"><a href="#75-考虑使用自定义的序列化形式" class="headerlink" title="75. 考虑使用自定义的序列化形式"></a>75. 考虑使用自定义的序列化形式</h2><h2 id="76-保护性地编写readObject方法"><a href="#76-保护性地编写readObject方法" class="headerlink" title="76. 保护性地编写readObject方法"></a>76. 保护性地编写readObject方法</h2><h2 id="77-对于实例控制，枚举类型优先于readResolve"><a href="#77-对于实例控制，枚举类型优先于readResolve" class="headerlink" title="77. 对于实例控制，枚举类型优先于readResolve"></a>77. 对于实例控制，枚举类型优先于readResolve</h2><h2 id="78-考虑使用序列化代理代替序列化实例"><a href="#78-考虑使用序列化代理代替序列化实例" class="headerlink" title="78. 考虑使用序列化代理代替序列化实例"></a>78. 考虑使用序列化代理代替序列化实例</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第一章-开始&quot;&gt;&lt;a href=&quot;#第一章-开始&quot; class=&quot;headerlink&quot; title=&quot;第一章 开始&quot;&gt;&lt;/a&gt;第一章 开始&lt;/h1&gt;&lt;p&gt;effective java 主要涉及java.lang、java.util基本类库，某种程度上涉及java.util.concurrent和java.io共78条建议。&lt;/p&gt;
    
    </summary>
    
      <category term="计算机软件" scheme="https://tanshuai1001.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="编程" scheme="https://tanshuai1001.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="java" scheme="https://tanshuai1001.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>设计模式笔记</title>
    <link href="https://tanshuai1001.github.io/2018/12/24/design-model/"/>
    <id>https://tanshuai1001.github.io/2018/12/24/design-model/</id>
    <published>2018-12-24T01:37:54.000Z</published>
    <updated>2018-12-24T08:46:14.666Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h1><p>根据模式的目的可分为：创建型，结构型和行为型<br><img src="/2018/12/24/design-model/outline.png" alt="概览"></p><p>JavaScript设计模式相关书籍：<a href="https://addyosmani.com/resources/essentialjsdesignpatterns/book/" target="_blank" rel="noopener">《Learning JavaScript Design Patterns》</a> by Addy Osmani</p><p>Java相关<a href="https://quanke.gitbooks.io/design-pattern-java/content/" target="_blank" rel="noopener">在线书籍</a>和<a href="https://github.com/quanke/design-pattern-java-source-code" target="_blank" rel="noopener">代码GitHub地址</a></p><a id="more"></a><h1 id="面相对象设计原则"><a href="#面相对象设计原则" class="headerlink" title="面相对象设计原则"></a>面相对象设计原则</h1><h2 id="1-开闭原则"><a href="#1-开闭原则" class="headerlink" title="1. 开闭原则"></a>1. 开闭原则</h2><p>一个软件实体应当对扩展开放，对修改关闭。即软件实体应尽量在不修改原有代码的情况下进行扩展。</p><h2 id="2-里氏替换原则"><a href="#2-里氏替换原则" class="headerlink" title="2. 里氏替换原则"></a>2. 里氏替换原则</h2><p>所有引用基类（父类）的地方必须能透明地使用其子类的对象。</p><h2 id="3-依赖转换原则"><a href="#3-依赖转换原则" class="headerlink" title="3. 依赖转换原则"></a>3. 依赖转换原则</h2><p>抽象不应该依赖于细节，细节应当依赖于抽象。</p><h2 id="4-单一职责原则"><a href="#4-单一职责原则" class="headerlink" title="4. 单一职责原则"></a>4. 单一职责原则</h2><p>一个类只负责一个功能领域中的相应职责。</p><h2 id="5-合成复用原则"><a href="#5-合成复用原则" class="headerlink" title="5. 合成复用原则"></a>5. 合成复用原则</h2><p>尽量使用对象组合，而不是继承来达到复用的目的。</p><h2 id="6-迪米特法则"><a href="#6-迪米特法则" class="headerlink" title="6. 迪米特法则"></a>6. 迪米特法则</h2><p>一个软件实体应当尽可能少地与其他实体发生相互作用。</p><h2 id="7-接口隔离原则"><a href="#7-接口隔离原则" class="headerlink" title="7. 接口隔离原则"></a>7. 接口隔离原则</h2><p>使用多个专门的接口，而不使用单一的总接口，即客户端不应该依赖那些它不需要的接口。</p><h1 id="使用频率"><a href="#使用频率" class="headerlink" title="使用频率"></a>使用频率</h1><p>高频率使用的模式: 工厂方法，抽象工厂，外观模式，迭代模式，观察者模式<br>常用使用的模式：单例模式，适配器模式，代理模式，组合模式，策略模式，命令模式</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概览&quot;&gt;&lt;a href=&quot;#概览&quot; class=&quot;headerlink&quot; title=&quot;概览&quot;&gt;&lt;/a&gt;概览&lt;/h1&gt;&lt;p&gt;根据模式的目的可分为：创建型，结构型和行为型&lt;br&gt;&lt;img src=&quot;/2018/12/24/design-model/outline.png&quot; alt=&quot;概览&quot;&gt;&lt;/p&gt;
&lt;p&gt;JavaScript设计模式相关书籍：&lt;a href=&quot;https://addyosmani.com/resources/essentialjsdesignpatterns/book/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《Learning JavaScript Design Patterns》&lt;/a&gt; by Addy Osmani&lt;/p&gt;
&lt;p&gt;Java相关&lt;a href=&quot;https://quanke.gitbooks.io/design-pattern-java/content/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;在线书籍&lt;/a&gt;和&lt;a href=&quot;https://github.com/quanke/design-pattern-java-source-code&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;代码GitHub地址&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="计算机软件" scheme="https://tanshuai1001.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="编程" scheme="https://tanshuai1001.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="设计模式" scheme="https://tanshuai1001.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>mysql常用命令</title>
    <link href="https://tanshuai1001.github.io/2018/05/13/mysql-user-privileges/"/>
    <id>https://tanshuai1001.github.io/2018/05/13/mysql-user-privileges/</id>
    <published>2018-05-13T15:52:44.000Z</published>
    <updated>2018-12-24T08:55:34.983Z</updated>
    
    <content type="html"><![CDATA[<h1 id="新建数据库和归属用户"><a href="#新建数据库和归属用户" class="headerlink" title="新建数据库和归属用户"></a>新建数据库和归属用户</h1><p>在服务器上经常用mysql作不同用途，每个用途新建一个database和对应用户将访问权限分离开是良好的习惯。快速而方便地创建MySQL用户和数据库的语句：</p><ol><li>创建数据库</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE databasename;</span><br></pre></td></tr></table></figure><ol><li>把数据库的所有权限归属到对应host下的用户并设置密码</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON databasename.* TO </span><br><span class="line">&quot;username&quot;@&quot;hostname&quot; IDENTIFIED BY &quot;password&quot;;</span><br></pre></td></tr></table></figure><ol><li>FLUSH清除或者重新加载内部缓存，使权限生效</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;新建数据库和归属用户&quot;&gt;&lt;a href=&quot;#新建数据库和归属用户&quot; class=&quot;headerlink&quot; title=&quot;新建数据库和归属用户&quot;&gt;&lt;/a&gt;新建数据库和归属用户&lt;/h1&gt;&lt;p&gt;在服务器上经常用mysql作不同用途，每个用途新建一个database和对应用户将访问权限分离开是良好的习惯。快速而方便地创建MySQL用户和数据库的语句：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建数据库&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CREATE DATABASE databasename;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;把数据库的所有权限归属到对应host下的用户并设置密码&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;GRANT ALL PRIVILEGES ON databasename.* TO &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;username&amp;quot;@&amp;quot;hostname&amp;quot; IDENTIFIED BY &amp;quot;password&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;FLUSH清除或者重新加载内部缓存，使权限生效&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;FLUSH PRIVILEGES;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="速查手册" scheme="https://tanshuai1001.github.io/categories/%E9%80%9F%E6%9F%A5%E6%89%8B%E5%86%8C/"/>
    
    
      <category term="mysql" scheme="https://tanshuai1001.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Hexo与NexT、markdown部分使用方法</title>
    <link href="https://tanshuai1001.github.io/2018/03/04/hello-world/"/>
    <id>https://tanshuai1001.github.io/2018/03/04/hello-world/</id>
    <published>2018-03-04T09:20:13.508Z</published>
    <updated>2018-12-24T08:55:26.865Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Hexo-Quick-Start-中文文档"><a href="#Hexo-Quick-Start-中文文档" class="headerlink" title="Hexo Quick Start 中文文档"></a>Hexo Quick Start <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">中文文档</a></h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server -p 5000</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><hr><a id="more"></a><h2 id="NexT"><a href="#NexT" class="headerlink" title="NexT"></a>NexT</h2><p><a href="https://github.com/theme-next/theme-next-fancybox3" target="_blank" rel="noopener">图片预览插件</a></p><hr><h2 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Hexo-Quick-Start-中文文档&quot;&gt;&lt;a href=&quot;#Hexo-Quick-Start-中文文档&quot; class=&quot;headerlink&quot; title=&quot;Hexo Quick Start 中文文档&quot;&gt;&lt;/a&gt;Hexo Quick Start &lt;a href=&quot;https://hexo.io/zh-cn/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;中文文档&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server -p 5000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Generate-static-files&quot;&gt;&lt;a href=&quot;#Generate-static-files&quot; class=&quot;headerlink&quot; title=&quot;Generate static files&quot;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/generating.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Deploy-to-remote-sites&quot;&gt;&lt;a href=&quot;#Deploy-to-remote-sites&quot; class=&quot;headerlink&quot; title=&quot;Deploy to remote sites&quot;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/deployment.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="速查手册" scheme="https://tanshuai1001.github.io/categories/%E9%80%9F%E6%9F%A5%E6%89%8B%E5%86%8C/"/>
    
    
      <category term="markdown" scheme="https://tanshuai1001.github.io/tags/markdown/"/>
    
      <category term="hexo" scheme="https://tanshuai1001.github.io/tags/hexo/"/>
    
      <category term="NexT" scheme="https://tanshuai1001.github.io/tags/NexT/"/>
    
  </entry>
  
</feed>
